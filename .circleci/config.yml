# Configuration file anchors
generate-version-file: &generate-version-file
  run:
    name: Create a version.json
    command: |
      # Create a version.json Ã -la-mozilla
      # https://github.com/mozilla-services/Dockerflow/blob/master/docs/version_object.md
      printf '{"commit":"%s","version":"%s","source":"https://github.com/%s/%s","build":"%s"}\n' \
        "$CIRCLE_SHA1" \
        "$CIRCLE_TAG" \
        "$CIRCLE_PROJECT_USERNAME" \
        "$CIRCLE_PROJECT_REPONAME" \
        "$CIRCLE_BUILD_URL" > src/backend/marsha/version.json

version: 2
jobs:
  # Git jobs
  # Check that the git history is clean and complies with our expectations
  lint-git:
    docker:
      - image: circleci/python:3.6-stretch
    working_directory: ~/marsha
    steps:
      - checkout
      - run:
          name: Check presence of all commit authors in CONTRIBUTORS.md file
          command: |
            for contributor in $(git log --pretty="format:%ae" 33587e4faee29ef55d0c8e8dd96eaa4989ea714a.. | sort | uniq ); do grep $contributor CONTRIBUTORS.md; done
      - run:
          name: Check absence of fixup commits
          command: |
            ! git log | grep 'fixup!'
      - run:
          name: Install gitlint
          command: |
            pip install --user gitlint
      - run:
          name: lint commit messages added to master
          command: |
              ~/.local/bin/gitlint --commits origin/master..HEAD

  # Check that the CHANGELOG has been updated in the current branch
  check-changelog:
    docker:
      - image: circleci/buildpack-deps:stretch-scm
    working_directory: ~/marsha
    steps:
      - checkout
      - run:
          name: Check that the CHANGELOG has been modified in the current branch
          command: |
            git whatchanged --name-only --pretty="" origin..HEAD | grep CHANGELOG

# Check that the CHANGELOG max line length does not exceed 80 characters
  lint-changelog:
    docker:
      - image: debian:stretch
    working_directory: ~/marsha
    steps:
      - checkout
      - run:
          name: Check CHANGELOG max line length
          command: |
            # Get the longuest line width (ignoring release links)
            test $(cat CHANGELOG.md | grep -Ev "^\[.*\]: https://github.com/openfun" | wc -L) -le 80

  # Docker/back-end jobs
  # Build job
  # Build the Docker image ready for production
  build-docker:
    docker:
      - image: circleci/buildpack-deps:stretch
    working_directory: ~/marsha
    steps:
      # Checkout repository sources
      - checkout
      # Generate a version.json file describing app release
      - <<: *generate-version-file
      # Activate docker-in-docker (with layers caching enabled)
      - setup_remote_docker:
          docker_layer_caching: true
      # Each image is tagged with the current git commit sha1 to avoid
      # collisions in parallel builds.
      - run:
          name: Build production image
          command: |
            docker build \
              -t marsha:${CIRCLE_SHA1} \
              .
      - run:
          name: Check built image availability
          command: docker images "marsha:${CIRCLE_SHA1}*"
      - run:
          name: Test running production image
          command: ./docker/tests/run.sh marsha ${CIRCLE_SHA1}
      - run:
          name: Test statics location in production image
          command: ./docker/tests/statics.sh marsha ${CIRCLE_SHA1}

  # Build backend development environment
  build-back:
    docker:
      - image: circleci/python:3.6-stretch
    working_directory: ~/marsha/src/backend
    steps:
      - checkout:
          path: ~/marsha
      - restore_cache:
          keys:
            - v3-back-dependencies-{{ .Revision }}
            - v3-back-dependencies
      - run:
          name: Install development dependencies
          command: pip install --user .[dev]
      - save_cache:
          paths:
            - ~/.local
          key: v3-back-dependencies-{{ .Revision }}

  # Build backend translations
  build-back-i18n:
    docker:
      - image: circleci/python:3.6-stretch
        environment:
          DJANGO_SETTINGS_MODULE: marsha.settings
          PYTHONPATH: /home/circleci/marsha/src/backend
          DJANGO_CONFIGURATION: Test
          DJANGO_SECRET_KEY: ThisIsAnExampleKeyForTestPurposeOnly
          DJANGO_JWT_SIGNING_KEY: ThisIsAnExampleKeyForDevPurposeOnly
          POSTGRES_HOST: localhost
          POSTGRES_DB: marsha
          POSTGRES_USER: fun
          POSTGRES_PASSWORD: pass
          POSTGRES_PORT: 5432
          DJANGO_AWS_ACCESS_KEY_ID: aws-access-key-id
          DJANGO_AWS_SECRET_ACCESS_KEY: aws-secret-access-key
          DJANGO_CLOUDFRONT_DOMAIN: abc.cloudfront.net
          DJANGO_UPDATE_STATE_SHARED_SECRETS: dummy,secret
    working_directory: ~/marsha/src/backend
    steps:
      - checkout:
          path: ~/marsha
      - restore_cache:
          keys:
            - v3-back-dependencies-{{ .Revision }}
      - run:
          name: Install gettext (required to make messages)
          command: sudo apt-get install -y gettext
      # Compile translation messages already present in the project
      - run:
          name: Generate a POT file from strings extracted from the project
          command: python manage.py compilemessages
      # Generate and persist the translations base file
      - run:
          name: Generate a POT file from strings extracted from the project
          command: python manage.py makemessages --keep-pot
      - persist_to_workspace:
          root: ~/marsha
          paths:
            - src/backend/locale/django.pot

  lint-back:
    docker:
      - image: circleci/python:3.6-stretch
    working_directory: ~/marsha/src/backend
    steps:
      - checkout:
          path: ~/marsha
      - restore_cache:
          keys:
            - v3-back-dependencies-{{ .Revision }}
      - run:
          name: Lint code with isort
          command: ~/.local/bin/isort --recursive --check-only marsha
      - run:
          name: Lint code with black
          command: ~/.local/bin/black --check marsha
      - run:
          name: Lint code with flake8
          command: ~/.local/bin/flake8 marsha
      - run:
          name: Lint code with pylint
          command: ~/.local/bin/pylint --rcfile=pylintrc marsha


  test-back:
    docker:
      - image: circleci/python:3.6-stretch
        environment:
          DJANGO_SETTINGS_MODULE: marsha.settings
          PYTHONPATH: /home/circleci/marsha/src/backend
          DJANGO_CONFIGURATION: Test
          DJANGO_SECRET_KEY: ThisIsAnExampleKeyForTestPurposeOnly
          DJANGO_JWT_SIGNING_KEY: ThisIsAnExampleKeyForDevPurposeOnly
          POSTGRES_HOST: localhost
          POSTGRES_DB: marsha
          POSTGRES_USER: marsha_user
          POSTGRES_PASSWORD: pass
          POSTGRES_PORT: 5432
          DJANGO_AWS_ACCESS_KEY_ID: aws-access-key-id
          DJANGO_AWS_SECRET_ACCESS_KEY: aws-secret-access-key
          DJANGO_CLOUDFRONT_DOMAIN: abc.cloudfront.net
          DJANGO_UPDATE_STATE_SHARED_SECRETS: dummy,secret
      - image: circleci/postgres:10.3-alpine-ram
        environment:
          POSTGRES_DB: marsha
          POSTGRES_USER: marsha_user
          POSTGRES_PASSWORD: pass
    working_directory: ~/marsha/src/backend
    steps:
      - checkout:
          path: ~/marsha
      - restore_cache:
          keys:
            - v3-back-dependencies-{{ .Revision }}
      # Run back-end (Django) test suite
      #
      # Nota bene: to run the django test suite, we need to ensure that the
      # PostgreSQL service is up and ready. To achieve this,
      # we wrap the command execution with dockerize, a tiny tool
      # installed in the development image. In our case, dockerize will wait
      # up to one minute until the database container is answering on port 5432.
      - run:
          name: Run tests
          command: |
                dockerize \
                  -wait tcp://localhost:5432 \
                  -timeout 60s \
                    python manage.py test

  # ---- Front-end jobs ----
  build-front:
    docker:
      - image: circleci/node:10
    working_directory: ~/marsha/src/frontend
    steps:
      - checkout:
          path: ~/marsha
      - restore_cache:
          keys:
            - v3-front-dependencies-{{ checksum "yarn.lock" }}
            - v3-front-dependencies-
      # If the yarn.lock file is not up-to-date with the package.json file,
      # using the --frozen-lockfile should fail.
      - run:
          name: Install front-end dependencies
          command: yarn install --frozen-lockfile
      - run:
          name: Compile translations
          command: yarn generate-translations
      - run:
          name: Build front-end application
          command: yarn build
      - run:
          name: Use react-intl-po to generate our frontend.pot file
          command: yarn generate-l10n-template
      - persist_to_workspace:
          root: ~/marsha
          paths:
            - src/frontend/i18n/frontend.pot
      - save_cache:
          paths:
            - ./node_modules
          key: v3-front-dependencies-{{ checksum "yarn.lock" }}

  lint-front:
    docker:
      - image: circleci/node:10
    working_directory: ~/marsha/src/frontend
    steps:
      - checkout:
          path: ~/marsha
      - restore_cache:
          keys:
            - v3-front-dependencies-{{ checksum "yarn.lock" }}
      - run:
          name: Lint code with tslint
          command: yarn lint
      - run:
          name: Lint code with prettier
          command: yarn prettier

  test-front:
    docker:
      - image: circleci/node:10
    working_directory: ~/marsha/src/frontend
    steps:
      - checkout:
          path: ~/marsha
      - restore_cache:
          keys:
            - v3-front-dependencies-{{ checksum "yarn.lock" }}
      - run:
          name: Run tests
          command: yarn test -w 1

  # ---- Lambda related jobs ----
  test-lambda-configure:
    docker:
      - image: circleci/node:8.10
      # Run on the highest version of node available on AWS Lambda
      # https://docs.aws.amazon.com/lambda/latest/dg/API_CreateFunction.html#SSS-CreateFunction-request-Runtime
    working_directory: ~/marsha/src/aws/lambda-configure
    steps:
      - checkout:
          path: ~/marsha
      - restore_cache:
          keys:
            - v3-lambdas-configure-dependencies-{{ checksum "yarn.lock" }}
            - v3-lambdas-configure-dependencies-
      - run:
          name: Install configure lambda dependencies
          command: yarn install --ignore-engines --frozen-lockfile
      - run:
          name: Run configure lambda tests
          command: yarn test
      - save_cache:
          paths:
            - ./node_modules
          key: v3-lambdas-configure-dependencies-{{ checksum "yarn.lock" }}

  test-lambda-encode:
    docker:
      - image: circleci/node:8.10
      # Run on the highest version of node available on AWS Lambda
      # https://docs.aws.amazon.com/lambda/latest/dg/API_CreateFunction.html#SSS-CreateFunction-request-Runtime
    working_directory: ~/marsha/src/aws/lambda-encode
    steps:
      - checkout:
          path: ~/marsha
      - restore_cache:
          keys:
            - v3-lambdas-encode-dependencies-{{ checksum "yarn.lock" }}
            - v3-lambdas-encode-dependencies-
      - run:
          name: Install encode lambda dependencies
          command: yarn install --ignore-engines --frozen-lockfile
      - run:
          name: Run encode lambda tests
          command: yarn test
      - save_cache:
          paths:
            - ./node_modules
          key: v3-lambdas-encode-dependencies-{{ checksum "yarn.lock" }}

  test-lambda-update-state:
    docker:
      - image: circleci/node:8.10
      # Run on the highest version of node available on AWS Lambda
      # https://docs.aws.amazon.com/lambda/latest/dg/API_CreateFunction.html#SSS-CreateFunction-request-Runtime
    working_directory: ~/marsha/src/aws/lambda-update-state
    steps:
      - checkout:
          path: ~/marsha
      - restore_cache:
          keys:
            - v3-lambdas-update-state-dependencies-{{ checksum "yarn.lock" }}
            - v3-lambdas-update-state-dependencies-
      - run:
          name: Install update-state lambda dependencies
          command: yarn install --ignore-engines --frozen-lockfile
      - run:
          name: Run update-state lambda tests
          command: yarn test
      - save_cache:
          paths:
            - ./node_modules
          key: v3-lambdas-update-state-dependencies-{{ checksum "yarn.lock" }}

  # ---- Alpine jobs ----
  build-alpine:
    docker:
      - image: circleci/buildpack-deps:stretch
    working_directory: ~/marsha
    steps:
      # Checkout repository sources
      - checkout
      # Generate a version.json file describing app release
      - <<: *generate-version-file
      # Activate docker-in-docker (with layers caching enabled)
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build alpine production image
          command: |
            docker build \
              -t marsha:${CIRCLE_SHA1}-alpine \
              -f docker/images/alpine/Dockerfile \
              .
      - run:
          name: Build alpine development image
          command: |
            docker build \
              -t marsha:${CIRCLE_SHA1}-alpine-dev \
              -f docker/images/alpine/dev/Dockerfile \
              --build-arg BASE_TAG=${CIRCLE_SHA1}-alpine \
              .
      - run:
          name: List available images
          command: docker images marsha
      - run:
          name: Test running alpine production image
          command: ./docker/tests/run.sh marsha ${CIRCLE_SHA1}-alpine
      - run:
          name: Test statics location in alpine production image
          command: ./docker/tests/statics.sh marsha ${CIRCLE_SHA1}-alpine
      - run:
          name: Run tests
          command: |
            IMAGE_SUFFIX="-alpine" \
            docker-compose \
              -p marsha-test \
              -f docker/compose/ci/docker-compose.yml \
              --project-directory . \
              run --rm app \
                dockerize \
                  -wait tcp://db:5432 \
                  -timeout 60s \
                    python manage.py test

  # Restore django and front POT files containing strings to translate and upload them to our
  # translation management tool
  i18n:
    docker:
      - image: fundocker/crowdin:2.0.27
    working_directory: ~/marsha
    steps:
      - checkout:
          path: ~/marsha
      - attach_workspace:
          at: ~/marsha
      - run:
          name: upload files to crowdin
          command: crowdin -c crowdin/config.yml upload sources

  # ---- DockerHub publication job ----
  hub:
    docker:
      - image: circleci/buildpack-deps:stretch
    working_directory: ~/marsha
    steps:
      - checkout
      # Generate a version.json file describing app release
      - <<: *generate-version-file
      # Activate docker-in-docker (with layers caching enabled)
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build production image (using cached layers)
          command: |
            docker build \
              -t marsha:${CIRCLE_SHA1} \
              .
      - run:
          name: Build alpine production image (from cached layers)
          command: |
            docker build \
              -t marsha:${CIRCLE_SHA1}-alpine \
              -f docker/images/alpine/Dockerfile \
              .
      # Login to DockerHub to Publish new images
      #
      # Nota bene: you'll need to define the following secrets environment vars
      # in CircleCI interface:
      #
      #   - DOCKER_USER
      #   - DOCKER_PASS
      - run:
          name: Login to DockerHub
          command: echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin

      # Tag docker images with the same pattern used in Git (Semantic Versioning)
      #
      # Git tag: v1.0.1
      # Docker tag: 1.0.1(-alpine)(-dev)
      - run:
          name: Tag images
          command: |
            docker images fundocker/marsha
            DOCKER_TAG=$([[ -z "$CIRCLE_TAG" ]] && echo $CIRCLE_BRANCH || echo ${CIRCLE_TAG} | sed 's/^v//')
            RELEASE_TYPE=$([[ -z "$CIRCLE_TAG" ]] && echo "branch" || echo "tag ")
            # Display either:
            # - DOCKER_TAG: master (Git branch)
            # or
            # - DOCKER_TAG: 1.1.2 (Git tag v1.1.2)
            echo "DOCKER_TAG: ${DOCKER_TAG} (Git ${RELEASE_TYPE}${CIRCLE_TAG})"
            docker tag marsha:${CIRCLE_SHA1} fundocker/marsha:${DOCKER_TAG}
            docker tag marsha:${CIRCLE_SHA1}-alpine fundocker/marsha:${DOCKER_TAG}-alpine
            if [[ -n "$CIRCLE_TAG" ]]; then
              docker tag marsha:${CIRCLE_SHA1} fundocker/marsha:latest
              docker tag marsha:${CIRCLE_SHA1}-alpine fundocker/marsha:alpine
            fi
            docker images | grep -E "^fundocker/marsha\s*(${DOCKER_TAG}.*|latest|alpine|master|master-alpine)"

      # Publish images to DockerHub
      #
      # Nota bene: logged user (see "Login to DockerHub" step) must have write
      # permission for the project's repository; this also implies that the
      # DockerHub repository already exists.
      - run:
          name: Publish images
          command: |
            DOCKER_TAG=$([[ -z "$CIRCLE_TAG" ]] && echo $CIRCLE_BRANCH || echo ${CIRCLE_TAG} | sed 's/^v//')
            RELEASE_TYPE=$([[ -z "$CIRCLE_TAG" ]] && echo "branch" || echo "tag ")
            # Display either:
            # - DOCKER_TAG: master (Git branch)
            # or
            # - DOCKER_TAG: 1.1.2 (Git tag v1.1.2)
            echo "DOCKER_TAG: ${DOCKER_TAG} (Git ${RELEASE_TYPE}${CIRCLE_TAG})"
            docker push fundocker/marsha:${DOCKER_TAG}
            docker push fundocker/marsha:${DOCKER_TAG}-alpine
            if [[ -n "$CIRCLE_TAG" ]]; then
              docker push fundocker/marsha:latest
              docker push fundocker/marsha:alpine
            fi

workflows:
  version: 2

  marsha:
    jobs:
      # Git jobs
      #
      # Check validity of git history
      - lint-git:
          filters:
            tags:
              only: /.*/

      # Front-end jobs
      #
      # Build (and later lint and test the front-end app)
      - build-front:
          filters:
            tags:
              only: /.*/
      - lint-front:
          requires:
            - build-front
          filters:
            tags:
              only: /.*/
      - test-front:
          requires:
            - build-front
          filters:
            tags:
              only: /.*/

      # Lambda related jobs
      - test-lambda-configure:
          filters:
            tags:
              only: /.*/
      - test-lambda-encode:
          filters:
            tags:
              only: /.*/
      - test-lambda-update-state:
          filters:
            tags:
              only: /.*/

      # Docker jobs
      #
      # Build, lint and test production and development Docker images
      # (debian-based)
      - build-docker:
          filters:
            tags:
              only: /.*/
      - build-back:
          filters:
            tags:
              only: /.*/
      - lint-back:
          requires:
            - build-back
          filters:
            tags:
              only: /.*/
      - test-back:
          requires:
            - build-back
          filters:
            tags:
              only: /.*/
      - check-changelog:
          filters:
            branches:
              ignore: master
            tags:
              ignore: /.*/

      # Docker alpine jobs
      #
      # Build and run tests in alpine based images
      - build-alpine:
          filters:
            tags:
              only: /.*/

      # i18n jobs
      #
      # Extract strings and upload them to our translation management SaaS
      - build-back-i18n:
          requires:
            - build-back
          filters:
            tags:
              only: /.*/
      - i18n:
          requires:
            - build-front
            - build-back-i18n
          filters:
            branches:
              only: master

      # DockerHub publication.
      #
      # Publish docker images only if all build, lint and test jobs succeed and
      # it has been tagged with a tag starting with the letter v
      - hub:
          requires:
            - build-docker
            - build-alpine
            - test-back
          filters:
            branches:
              only: master
            tags:
              only: /^v.*/
