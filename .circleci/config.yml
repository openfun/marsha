# CircleCI's configuration for Marsha
#
# Reference: https://circleci.com/docs/2.0/configuration-reference/

aliases:
  - &docker_login
    # Login to DockerHub
    #
    # Nota bene: you'll need to define the following secrets environment vars
    # in CircleCI interface:
    #
    #   - DOCKER_USER
    #   - DOCKER_PASS
    run:
      name: Login to DockerHub
      command: echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin

# Configuration file anchors
generate-version-file: &generate-version-file
  run:
    name: Create a version.json
    command: |
      # Create a version.json Ã -la-mozilla
      # https://github.com/mozilla-services/Dockerflow/blob/master/docs/version_object.md
      printf '{"commit":"%s","version":"%s","source":"https://github.com/%s/%s","build":"%s"}\n' \
        "$CIRCLE_SHA1" \
        "${CIRCLE_TAG:-$CIRCLE_SHA1}" \
        "$CIRCLE_PROJECT_USERNAME" \
        "$CIRCLE_PROJECT_REPONAME" \
        "$CIRCLE_BUILD_URL" > src/backend/marsha/version.json

version: 2.1
commands:
  get_last_packages_commit:
    description: "Get last commit that modified packages and stores it in File. File is used as checksum source for part of frontend caching key."
    parameters:
      filename:
        type: string
    steps:
      - run:
          name: Get last commit that modified packages
          command: git log -n 1 --pretty=format:%H -- packages > << parameters.filename >>
jobs:
  # Git jobs
  # Check that the git history is clean and complies with our expectations
  lint-git:
    docker:
      # stay in python 3.8
      - image: cimg/python:3.8
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    working_directory: ~/marsha
    steps:
      - checkout
      - run:
          name: Check presence of all commit authors in CONTRIBUTORS.md file
          command: |
            for contributor in $(git log --pretty="format:%ae" 33587e4faee29ef55d0c8e8dd96eaa4989ea714a.. | sort | uniq ); do grep -F $contributor CONTRIBUTORS.md; done
      - run:
          name: Check absence of fixup commits
          command: |
            ! git log | grep 'fixup!'
      - run:
          name: Install gitlint
          command: |
            pip install requests
            pip install --user gitlint
      - run:
          name: lint commit messages added to master
          command: |
            ~/.local/bin/gitlint --commits origin/master..HEAD

  # Check that the CHANGELOG has been updated in the current branch
  check-changelog:
    docker:
      - image: cimg/base:2022.04
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    working_directory: ~/marsha
    steps:
      - checkout
      - run:
          name: Check that the CHANGELOG has been modified in the current branch
          command: |
            git whatchanged --name-only --pretty="" origin..HEAD | grep CHANGELOG

  # Check that the CHANGELOG max line length does not exceed 80 characters
  lint-changelog:
    docker:
      - image: debian:stretch
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    working_directory: ~/marsha
    steps:
      - checkout
      - run:
          name: Check CHANGELOG max line length
          command: |
            # Get the longuest line width (ignoring release links)
            test $(cat CHANGELOG.md | grep -Ev "^\[.*\]: https://github.com/openfun" | wc -L) -le 80

  # Check that renovate configuration file is valid
  check-renovate-configuration:
    docker:
      - image: renovate/renovate
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    working_directory: ~/marsha
    steps:
      - checkout
      - run:
          name: Run renovate-config-validator command
          command: renovate-config-validator

  # Docker/back-end jobs
  # Build job
  # Build the Docker image ready for production
  build-docker:
    docker:
      - image: cimg/base:2022.04
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    working_directory: ~/marsha
    steps:
      # Checkout repository sources
      - checkout
      # Generate a version.json file describing app release
      - <<: *generate-version-file
      # Activate docker-in-docker
      - setup_remote_docker:
          version: 20.10.11
          docker_layer_caching: true
      - *docker_login
      # Each image is tagged with the current git commit sha1 to avoid
      # collisions in parallel builds.
      - run:
          name: Build production image
          command: |
            export DOCKER_BUILDKIT=1
            docker build \
              -t marsha:${CIRCLE_SHA1} \
              .
      - run:
          name: Check built image availability
          command: docker images "marsha:${CIRCLE_SHA1}*"
      - run:
          name: Test running production image
          command: ./docker/tests/run.sh marsha ${CIRCLE_SHA1}
      - run:
          name: Test statics location in production image
          command: ./docker/tests/statics.sh marsha ${CIRCLE_SHA1}

  build-lambda-docker-and-test-lambda-convert:
    machine:
      image: ubuntu-2004:202107-02
    working_directory: ~/marsha
    steps:
      # Checkout repository sources
      - checkout
      - *docker_login
      # Each image is tagged with the current git commit sha1 to avoid
      # collisions in parallel builds.
      - run:
          name: Make lambda environment
          command: make env.d/lambda
      - run:
          name: Build production image
          command: |
            ./bin/lambda build ${CIRCLE_SHA1}

      - run:
          name: Check built image availability
          command: docker image ls "${LAMBDA_IMAGE_NAME}:${CIRCLE_SHA1}"

      - run:
          name: Build lambda development image
          command: |
            ./bin/lambda build "development-${CIRCLE_SHA1}" development

      - run:
          name: Run convert lambda tests
          command: docker run --rm --entrypoint "" "${LAMBDA_IMAGE_NAME}:development-${CIRCLE_SHA1}" yarn --cwd ./lambda-convert test

  build-ffmpeg-transmux-docker:
    docker:
      - image: cimg/base:2022.04
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    working_directory: ~/marsha
    steps:
      # Checkout repository sources
      - checkout
      # Activate docker-in-docker
      - setup_remote_docker:
          version: 20.10.11
          docker_layer_caching: true
      - *docker_login
      # Each image is tagged with the current git commit sha1 to avoid
      # collisions in parallel builds.
      - run:
          name: Build production image
          command: |
            export DOCKER_BUILDKIT=1
            docker build \
              -t marsha-ffmpeg-transmux:${CIRCLE_SHA1} \
              src/aws/ffmpeg-transmux-live-image/

      - run:
          name: Check built image availability
          command: docker image ls "marsha-ffmpeg-transmux:${CIRCLE_SHA1}"

  # Build backend development environment
  build-back:
    docker:
      - image: cimg/python:3.10.7
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    working_directory: ~/marsha/src/backend
    steps:
      - checkout:
          path: ~/marsha
      - restore_cache:
          keys:
            - v4-back-dependencies-{{ .Revision }}
      - run:
          name: Install development dependencies
          command: pip install --user .[dev]
      - save_cache:
          paths:
            - ~/.local
          key: v4-back-dependencies-{{ .Revision }}

  # Build backend translations
  build-back-i18n:
    docker:
      - image: cimg/python:3.10.7
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
        environment:
          DJANGO_SETTINGS_MODULE: marsha.settings
          PYTHONPATH: /home/circleci/marsha/src/backend
          DJANGO_CONFIGURATION: Test
          DJANGO_SECRET_KEY: ThisIsAnExampleKeyForTestPurposeOnly
          DJANGO_JWT_SIGNING_KEY: ThisIsAnExampleKeyForDevPurposeOnly
          POSTGRES_HOST: localhost
          POSTGRES_DB: marsha
          POSTGRES_USER: fun
          POSTGRES_PASSWORD: pass
          POSTGRES_PORT: 5432
          DJANGO_AWS_ACCESS_KEY_ID: aws-access-key-id
          DJANGO_AWS_SECRET_ACCESS_KEY: aws-secret-access-key
          DJANGO_CLOUDFRONT_DOMAIN: abc.cloudfront.net
          DJANGO_UPDATE_STATE_SHARED_SECRETS: dummy,secret
          DJANGO_AWS_MEDIALIVE_ROLE_ARN: aws:medialive:arn:role
          DJANGO_AWS_MEDIAPACKAGE_HARVEST_JOB_ARN: aws:mediapackage:arn:role
          DJANGO_BBB_API_SECRET: bbb-api-secret
    working_directory: ~/marsha/src/backend
    steps:
      - checkout:
          path: ~/marsha
      - attach_workspace:
          at: ~/marsha
      - restore_cache:
          keys:
            - v4-back-dependencies-{{ .Revision }}
      - run:
          name: Install gettext (required to make messages)
          command: |
            sudo apt-get update
            sudo apt-get install -y gettext
      # Compile translation messages already present in the project
      - run:
          name: Generate a MO file from strings extracted from the project
          command: python manage.py compilemessages
      # Generate and persist the translations base file
      - run:
          name: Generate a POT file from strings extracted from the project
          command: python manage.py makemessages --keep-pot --all
      - persist_to_workspace:
          root: ~/marsha
          paths:
            - src/backend/locale

  lint-back:
    docker:
      - image: cimg/python:3.10.7
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    working_directory: ~/marsha/src/backend
    steps:
      - checkout:
          path: ~/marsha
      - restore_cache:
          keys:
            - v4-back-dependencies-{{ .Revision }}
      - run:
          name: Lint code with isort
          command: ~/.local/bin/isort --check-only marsha
      - run:
          name: Lint code with black
          command: ~/.local/bin/black --check marsha --exclude='.cookiecutter'
      - run:
          name: Lint code with flake8
          command: ~/.local/bin/flake8 marsha
      - run:
          name: Lint code with pylint
          command: ~/.local/bin/pylint --rcfile=pylintrc marsha
      - run:
          name: Lint code with bandit
          command: ~/.local/bin/bandit -c .bandit -qr marsha

  test-back:
    docker:
      - image: cimg/python:3.10.7
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
        environment:
          DJANGO_SETTINGS_MODULE: marsha.settings
          PYTHONPATH: /home/circleci/marsha/src/backend
          DJANGO_CONFIGURATION: Test
          DJANGO_SECRET_KEY: ThisIsAnExampleKeyForTestPurposeOnly
          DJANGO_JWT_SIGNING_KEY: ThisIsAnExampleKeyForDevPurposeOnly
          POSTGRES_HOST: localhost
          POSTGRES_DB: marsha
          POSTGRES_USER: marsha_user
          POSTGRES_PASSWORD: pass
          POSTGRES_PORT: 5432
          DJANGO_AWS_ACCESS_KEY_ID: aws-access-key-id
          DJANGO_AWS_SECRET_ACCESS_KEY: aws-secret-access-key
          DJANGO_CLOUDFRONT_DOMAIN: abc.cloudfront.net
          DJANGO_UPDATE_STATE_SHARED_SECRETS: dummy,secret
          DJANGO_AWS_MEDIALIVE_ROLE_ARN: aws:medialive:arn:role
          DJANGO_AWS_MEDIAPACKAGE_HARVEST_JOB_ARN: aws:mediapackage:arn:role
          DJANGO_BBB_API_SECRET: bbb-api-secret
          DJANGO_MARKDOWN_ENABLED: 1
      - image: cimg/postgres:10.20
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
        environment:
          POSTGRES_DB: marsha
          POSTGRES_USER: marsha_user
          POSTGRES_PASSWORD: pass
    working_directory: ~/marsha/src/backend
    steps:
      - checkout:
          path: ~/marsha
      - attach_workspace:
          at: ~/marsha
      - restore_cache:
          keys:
            - v4-back-dependencies-{{ .Revision }}
      - run:
          name: Install latex & xmlsec (required to run tests)
          command: |
            sudo apt-get update
            sudo apt-get install -y texlive-latex-extra dvisvgm libxmlsec1-dev
      # Run back-end (Django) test suite
      #
      # Nota bene: to run the django test suite, we need to ensure that the
      # PostgreSQL service is up and ready. To achieve this,
      # we wrap the command execution with dockerize, a tiny tool
      # installed in cimg/python image. In our case, dockerize will wait
      # up to one minute until the database container is answering on port 5432.
      - run:
          name: Run tests
          command: |
            dockerize \
              -wait tcp://localhost:5432 \
              -timeout 60s \
                ~/.local/bin/pytest marsha --ignore=marsha/e2e

  # ---- Front-end jobs ----
  build-front:
    docker:
      - image: cimg/node:16.15
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
        environment:
          BUILD_PATH: ../../../backend/marsha/static/js/build/site/
    working_directory: ~/marsha/src/frontend
    steps:
      - checkout:
          path: ~/marsha
      - get_last_packages_commit:
          filename: packages-last-commit.txt
      - restore_cache:
          keys:
            - front-dependencies-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}
      - restore_cache:
          keys:
            - front-libs-{{ .Environment.CACHE_VERSION }}-{{ checksum "packages-last-commit.txt" }}
      # If the yarn.lock file is not up-to-date with the package.json file,
      # using the --frozen-lockfile should fail.
      - run:
          name: Install front-end dependencies
          command: yarn install --frozen-lockfile
      - run:
          name: Compile translations
          command: yarn compile-translations
      - run:
          name: Build all libs
          command: yarn build-libs
      - run:
          name: Build front-end lti application
          command: yarn workspace marsha run build
      - run:
          name: Build front-end standalone application
          command: yarn workspace standalone_site run build
      - run:
          name: Extract all translations
          command: yarn extract-translations
      - persist_to_workspace:
          root: ~/marsha
          paths:
            - src/frontend/apps/lti_site/i18n/frontend.json
            - src/frontend/apps/standalone_site/i18n/frontend.json
            - src/frontend/packages/i18n/frontend.json
      - save_cache:
          paths:
            - ./node_modules
            - ./apps/lti_site/node_modules
            - ./apps/standalone_site/node_modules
            - ./packages/lib_common/node_modules
            - ./packages/lib_tests/node_modules
            - ./packages/lib_components/node_modules
            - ./packages/lib_classroom/node_modules
            - ./packages/lib_video/node_modules
          key: front-dependencies-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}
      - save_cache:
          paths:
            - ./packages/lib_common/lib
            - ./packages/lib_tests/lib
            - ./packages/lib_components/lib
            - ./packages/lib_classroom/lib
            - ./packages/lib_video/lib
          key: front-libs-{{ .Environment.CACHE_VERSION }}-{{ checksum "packages-last-commit.txt" }}

  # ---- mail jobs ----
  build-mails:
    docker:
      - image: cimg/node:16.15
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    working_directory: ~/marsha/src/mail
    steps:
      - checkout:
          path: ~/marsha
      - restore_cache:
          keys:
            - v5-mail-dependencies-{{ checksum "yarn.lock" }}
      # If the yarn.lock file is not up-to-date with the package.json file,
      # using the --frozen-lockfile should fail.
      - run:
          name: Install node dependencies
          command: yarn install --frozen-lockfile
      - run:
          name: Build mails
          command: yarn build-mails
      - persist_to_workspace:
          root: ~/marsha
          paths:
            - src/backend/marsha/core/templates/core/mail
      - save_cache:
          paths:
            - ./node_modules
          key: v5-mail-dependencies-{{ checksum "yarn.lock" }}

  lint-front:
    docker:
      - image: cimg/node:16.15
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    working_directory: ~/marsha/src/frontend
    steps:
      - checkout:
          path: ~/marsha
      - get_last_packages_commit:
          filename: packages-last-commit.txt
      - restore_cache:
          keys:
            - front-dependencies-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}
      - restore_cache:
          keys:
            - front-libs-{{ .Environment.CACHE_VERSION }}-{{ checksum "packages-last-commit.txt" }}
      - run:
          name: Lint code with tslint
          command: yarn lint
      - run:
          name: Lint code with prettier
          command: yarn prettier

  test-front:
    docker:
      - image: cimg/node:16.15
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    working_directory: ~/marsha/src/frontend
    parallelism: 4
    resource_class: large
    steps:
      - checkout:
          path: ~/marsha
      - get_last_packages_commit:
          filename: packages-last-commit.txt
      - restore_cache:
          keys:
            - front-dependencies-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}
      - restore_cache:
          keys:
            - front-libs-{{ .Environment.CACHE_VERSION }}-{{ checksum "packages-last-commit.txt" }}
      - run:
          name: Install Puppeteer dependencies for visual regression testing
          command: |
            sudo apt-get update
            sudo apt-get install -y \
              ca-certificates \
              fonts-liberation \
              libappindicator3-1 \
              libasound2 \
              libatk-bridge2.0-0 \
              libatk1.0-0 \
              libc6 \
              libcairo2 \
              libcups2 \
              libdbus-1-3 \
              libexpat1 \
              libfontconfig1 \
              libgbm1 \
              libgcc1 \
              libglib2.0-0 \
              libgtk-3-0 \
              libnspr4 \
              libnss3 \
              libpango-1.0-0 \
              libpangocairo-1.0-0 \
              libstdc++6 \
              libx11-6 \
              libx11-xcb1 \
              libxcb1 \
              libxcomposite1 \
              libxcursor1 \
              libxdamage1 \
              libxext6 \
              libxfixes3 \
              libxi6 \
              libxrandr2 \
              libxrender1 \
              libxss1 \
              libxtst6 \
              lsb-release \
              wget \
              xdg-utils
      - run:
          name: Run tests on libs-components
          command: yarn workspace lib-components run test -w 3 --shard "$(($CIRCLE_NODE_INDEX + 1))/$CIRCLE_NODE_TOTAL"
      - run:
          name: Run tests on lib-classroom
          command: yarn workspace lib-classroom run test -w 3 --shard "$(($CIRCLE_NODE_INDEX + 1))/$CIRCLE_NODE_TOTAL"
      - run:
          name: Run tests on lib-video
          command: yarn workspace lib-video run test -w 3 --shard "$(($CIRCLE_NODE_INDEX + 1))/$CIRCLE_NODE_TOTAL"
      - run:
          name: Run tests on lti site
          command: yarn workspace marsha run test -w 3 --shard "$(($CIRCLE_NODE_INDEX + 1))/$CIRCLE_NODE_TOTAL"
      - store_artifacts:
          path: ~/marsha/src/frontend/apps/lti_site/__diff_output__
      - store_artifacts:
          path: ~/marsha/src/frontend/packages/lib_components/__diff_output__
      - store_artifacts:
          path: ~/marsha/src/frontend/packages/lib_classroom/__diff_output__
      - store_artifacts:
          path: ~/marsha/src/frontend/packages/lib_video/__diff_output__

  test-website:
    docker:
      - image: cimg/node:16.15
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    working_directory: ~/marsha/src/frontend
    resource_class: large
    steps:
      - checkout:
          path: ~/marsha
      - get_last_packages_commit:
          filename: packages-last-commit.txt
      - restore_cache:
          keys:
            - front-dependencies-{{ .Environment.CACHE_VERSION }}-{{ checksum "yarn.lock" }}
      - restore_cache:
          keys:
            - front-libs-{{ .Environment.CACHE_VERSION }}-{{ checksum "packages-last-commit.txt" }}
      - run:
          name: Run test on standalone site
          command: yarn workspace standalone_site run test --watchAll=false --maxWorkers=2

  test-e2e:
    docker:
      - image: mcr.microsoft.com/playwright:focal
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
        environment:
          DJANGO_SETTINGS_MODULE: marsha.settings
          PYTHONPATH: /home/circleci/marsha/src/backend
          DJANGO_CONFIGURATION: Test
          DJANGO_SECRET_KEY: ThisIsAnExampleKeyForTestPurposeOnly
          DJANGO_JWT_SIGNING_KEY: ThisIsAnExampleKeyForDevPurposeOnly
          POSTGRES_HOST: localhost
          POSTGRES_DB: marsha
          POSTGRES_USER: marsha_user
          POSTGRES_PASSWORD: pass
          POSTGRES_PORT: 5432
          DJANGO_AWS_ACCESS_KEY_ID: aws-access-key-id
          DJANGO_AWS_SECRET_ACCESS_KEY: aws-secret-access-key
          DJANGO_CLOUDFRONT_DOMAIN: abc.cloudfront.net
          DJANGO_UPDATE_STATE_SHARED_SECRETS: dummy,secret
          DJANGO_AWS_MEDIALIVE_ROLE_ARN: aws:medialive:arn:role
          DJANGO_AWS_MEDIAPACKAGE_HARVEST_JOB_ARN: aws:mediapackage:arn:role
          DJANGO_BBB_API_SECRET: bbb-api-secret
          DOCKERIZE_VERSION: v0.6.1
          DJANGO_ALLOW_ASYNC_UNSAFE: 1
          DJANGO_BBB_ENABLED: 1
          DEBUG: pw:browser*
          BUILD_PATH: ../../../backend/marsha/static/js/build/site/
      - image: cimg/postgres:10.20
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
        environment:
          POSTGRES_DB: marsha
          POSTGRES_USER: marsha_user
          POSTGRES_PASSWORD: pass
    working_directory: ~/marsha/src/backend
    parameters:
      browser:
        description: "Playwright browser"
        default: "firefox"
        type: string
      browser_channel:
        description: "Playwright browser channel"
        default: "firefox"
        type: string
    steps:
      - checkout:
          path: ~/marsha
      - run: # Can be removed when switching to mcr.microsoft.com/playwright:jammy
          name: Install Python 3.10
          command: apt update && apt upgrade -y && apt install -y software-properties-common && add-apt-repository -y 'ppa:deadsnakes/ppa' && apt install -y python3.10 python3.10-dev build-essential
      - run: # Can be removed when switching to mcr.microsoft.com/playwright:jammy
          name: Install pip for Python 3.10
          command: curl -sS https://bootstrap.pypa.io/get-pip.py | python3.10
      - run:
          name: Install xmlsec1 requirements
          command: apt-get update && apt-get install -y pkg-config libxml2-dev libxmlsec1-openssl libxmlsec1-dev
      - run:
          name: Install e2e dependencies
          command: python3.10 -m pip install --user .[dev,e2e]
      - run:
          name: Install front-end dependencies
          working_directory: ~/marsha/src/frontend
          command: yarn install --frozen-lockfile
      - run:
          name: Build front-end LTI application
          working_directory: ~/marsha/src/frontend
          command: yarn build-lti
      - run:
          name: Build lib_tests
          working_directory: ~/marsha/src/frontend
          command: yarn build-tests
      - run:
          name: Build front-end site application
          working_directory: ~/marsha/src/frontend
          command: yarn build-site
      - run:
          name: Copy iframe resizer
          working_directory: ~/marsha/src/frontend
          command: yarn workspace marsha run copy-iframe-resizer
      - run:
          name: Ensure << parameters.browser >> browser is installed
          command: python3.10 -m playwright install "<< parameters.browser >>"
      - run:
          name: Install dockerize
          command: |
            curl -LO https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \
            && tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz \
            && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
      - run:
          name: Copy e2e media files
          command: |
            mkdir -p /data/media \
            && cp -r marsha/e2e/media /data/media/e2e
      - when:
          condition:
            equal: [chrome, << parameters.browser_channel >>]
          steps:
            - run:
                name: Build apt cache
                command: apt update
            - run:
                name: Install chrome
                command: python3.10 -m playwright install chrome
      - run:
          name: Run e2e tests
          command: |
            dockerize \
              -wait tcp://localhost:5432 \
              -timeout 60s \
                ~/.local/bin/pytest --tracing on \
                --browser-channel "<< parameters.browser_channel >>" \
                --browser "<< parameters.browser >>" marsha/e2e
      - store_artifacts:
          path: ~/marsha/src/backend/test-results

  # ---- Lambda related jobs ----
  test-lambda-configure:
    docker:
      - image: cimg/node:16.16
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
      # Run on the highest version of node available on AWS Lambda
      # https://docs.aws.amazon.com/lambda/latest/dg/API_CreateFunction.html#SSS-CreateFunction-request-Runtime
    working_directory: ~/marsha/src/aws/lambda-configure
    steps:
      - checkout:
          path: ~/marsha
      - restore_cache:
          keys:
            - v3-lambdas-configure-dependencies-{{ checksum "yarn.lock" }}
            - v3-lambdas-configure-dependencies-
      - run:
          name: Install configure lambda dependencies
          command: yarn install --frozen-lockfile
      - run:
          name: Run configure lambda tests
          command: yarn test
      - save_cache:
          paths:
            - ./node_modules
          key: v3-lambdas-configure-dependencies-{{ checksum "yarn.lock" }}

  test-lambda-complete:
    docker:
      - image: cimg/node:16.16
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
      # Run on the highest version of node available on AWS Lambda
      # https://docs.aws.amazon.com/lambda/latest/dg/API_CreateFunction.html#SSS-CreateFunction-request-Runtime
    working_directory: ~/marsha/src/aws/lambda-complete
    steps:
      - checkout:
          path: ~/marsha
      - restore_cache:
          keys:
            - v3-lambdas-complete-dependencies-{{ checksum "yarn.lock" }}
            - v3-lambdas-complete-dependencies-
      - run:
          name: Install complete lambda dependencies
          command: yarn install --frozen-lockfile
      - run:
          name: Run complete lambda tests
          command: yarn test
      - save_cache:
          paths:
            - ./node_modules
          key: v3-lambdas-complete-dependencies-{{ checksum "yarn.lock" }}

  test-lambda-medialive:
    docker:
      - image: cimg/node:16.16
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
      # Run on the highest version of node available on AWS Lambda
      # https://docs.aws.amazon.com/lambda/latest/dg/API_CreateFunction.html#SSS-CreateFunction-request-Runtime
    working_directory: ~/marsha/src/aws/lambda-medialive
    steps:
      - checkout:
          path: ~/marsha
      - restore_cache:
          keys:
            - v3-lambdas-medialive-dependencies-{{ checksum "yarn.lock" }}
      - run:
          name: Install complete lambda dependencies
          command: yarn install --frozen-lockfile
      - run:
          name: Run medialive lambda tests
          command: yarn test
      - save_cache:
          paths:
            - ./node_modules
          key: v3-lambdas-medialive-dependencies-{{ checksum "yarn.lock" }}

  test-lambda-mediapackage:
    docker:
      - image: cimg/node:16.16
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
      # Run on the highest version of node available on AWS Lambda
      # https://docs.aws.amazon.com/lambda/latest/dg/API_CreateFunction.html#SSS-CreateFunction-request-Runtime
    working_directory: ~/marsha/src/aws/lambda-mediapackage
    steps:
      - checkout:
          path: ~/marsha
      - restore_cache:
          keys:
            - v3-lambdas-mediapackage-dependencies-{{ checksum "yarn.lock" }}
      - run:
          name: Install complete lambda dependencies
          command: yarn install --frozen-lockfile
      - run:
          name: Run medialive lambda tests
          command: yarn test
      - save_cache:
          paths:
            - ./node_modules
          key: v3-lambdas-mediapackage-dependencies-{{ checksum "yarn.lock" }}

  test-lambda-elemental-routing:
    docker:
      - image: cimg/node:16.16
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
      # Run on the highest version of node available on AWS Lambda
      # https://docs.aws.amazon.com/lambda/latest/dg/API_CreateFunction.html#SSS-CreateFunction-request-Runtime
    working_directory: ~/marsha/src/aws/lambda-elemental-routing
    steps:
      - checkout:
          path: ~/marsha
      - restore_cache:
          keys:
            - v3-lambdas-medialive-routing-dependencies-{{ checksum "yarn.lock" }}
      - run:
          name: Install complete lambda dependencies
          command: yarn install --frozen-lockfile
      - run:
          name: Run medialive routing lambda tests
          command: yarn test
      - save_cache:
          paths:
            - ./node_modules
          key: v3-lambdas-medialive-routing-dependencies-{{ checksum "yarn.lock" }}

  lint-lambda-configure:
    docker:
      - image: cimg/node:16.16
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
      # Run on the highest version of node available on AWS Lambda
      # https://docs.aws.amazon.com/lambda/latest/dg/API_CreateFunction.html#SSS-CreateFunction-request-Runtime
    working_directory: ~/marsha/src/aws/lambda-configure
    steps:
      - checkout:
          path: ~/marsha
      - restore_cache:
          keys:
            - v3-lambdas-configure-dependencies-{{ checksum "yarn.lock" }}
      - run:
          name: Install configure lambda dependencies
          command: yarn install --frozen-lockfile
      - run:
          name: lint code
          command: yarn prettier --list-different '**/*.+(json|js)'

  lint-lambda-convert:
    docker:
      - image: cimg/node:16.16
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
      # Run on the highest version of node available on AWS Lambda
      # https://docs.aws.amazon.com/lambda/latest/dg/API_CreateFunction.html#SSS-CreateFunction-request-Runtime
    working_directory: ~/marsha/src/aws/lambda-convert
    steps:
      - checkout:
          path: ~/marsha
      - run:
          name: Install convert lambda dependencies
          command: yarn install --frozen-lockfile
      - run:
          name: lint code
          command: yarn prettier --list-different '**/*.+(json|js)'

  lint-lambda-complete:
    docker:
      - image: cimg/node:16.16
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
      # Run on the highest version of node available on AWS Lambda
      # https://docs.aws.amazon.com/lambda/latest/dg/API_CreateFunction.html#SSS-CreateFunction-request-Runtime
    working_directory: ~/marsha/src/aws/lambda-complete
    steps:
      - checkout:
          path: ~/marsha
      - restore_cache:
          keys:
            - v3-lambdas-complete-dependencies-{{ checksum "yarn.lock" }}
      - run:
          name: Install complete lambda dependencies
          command: yarn install --frozen-lockfile
      - run:
          name: lint code
          command: yarn prettier --list-different '**/*.+(json|js)'

  lint-lambda-medialive:
    docker:
      - image: cimg/node:16.16
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
      # Run on the highest version of node available on AWS Lambda
      # https://docs.aws.amazon.com/lambda/latest/dg/API_CreateFunction.html#SSS-CreateFunction-request-Runtime
    working_directory: ~/marsha/src/aws/lambda-medialive
    steps:
      - checkout:
          path: ~/marsha
      - restore_cache:
          keys:
            - v3-lambdas-medialive-dependencies-{{ checksum "yarn.lock" }}
      - run:
          name: Install complete lambda dependencies
          command: yarn install --frozen-lockfile
      - run:
          name: lint code
          command: yarn prettier --list-different '**/*.+(json|js)'

  lint-lambda-mediapackage:
    docker:
      - image: cimg/node:16.16
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
      # Run on the highest version of node available on AWS Lambda
      # https://docs.aws.amazon.com/lambda/latest/dg/API_CreateFunction.html#SSS-CreateFunction-request-Runtime
    working_directory: ~/marsha/src/aws/lambda-mediapackage
    steps:
      - checkout:
          path: ~/marsha
      - restore_cache:
          keys:
            - v3-lambdas-mediapackage-dependencies-{{ checksum "yarn.lock" }}
      - run:
          name: Install complete lambda dependencies
          command: yarn install --frozen-lockfile
      - run:
          name: lint code
          command: yarn prettier --list-different '**/*.+(json|js)'

  lint-lambda-elemental-routing:
    docker:
      - image: cimg/node:16.16
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
      # Run on the highest version of node available on AWS Lambda
      # https://docs.aws.amazon.com/lambda/latest/dg/API_CreateFunction.html#SSS-CreateFunction-request-Runtime
    working_directory: ~/marsha/src/aws/lambda-elemental-routing
    steps:
      - checkout:
          path: ~/marsha
      - restore_cache:
          keys:
            - v3-lambdas-elemental-routing-dependencies-{{ checksum "yarn.lock" }}
      - run:
          name: Install complete lambda dependencies
          command: yarn install --frozen-lockfile
      - run:
          name: lint code
          command: yarn prettier --list-different '**/*.+(json|js)'

  # Restore django and front POT files containing strings to translate and upload them to our
  # translation management tool
  i18n:
    docker:
      - image: crowdin/cli:3.7.10
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    working_directory: ~/marsha
    steps:
      - checkout:
          path: ~/marsha
      - attach_workspace:
          at: ~/marsha
      - run:
          name: upload files to crowdin
          command: crowdin upload sources -c crowdin/config.yml

  # ---- DockerHub publication job ----
  hub:
    docker:
      - image: cimg/base:2022.04
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    working_directory: ~/marsha
    steps:
      - checkout
      # Generate a version.json file describing app release
      - <<: *generate-version-file
      # Activate docker-in-docker
      - setup_remote_docker:
          version: 20.10.11
          docker_layer_caching: true
      - *docker_login
      - run:
          name: Build production image (using cached layers)
          command: |
            export DOCKER_BUILDKIT=1
            docker build \
              -t marsha:${CIRCLE_SHA1} \
              .

      # Tag docker images with the same pattern used in Git (Semantic Versioning)
      #
      # Git tag: v1.0.1
      # Docker tag: 1.0.1(-dev)
      - run:
          name: Tag images
          command: |
            docker images fundocker/marsha
            DOCKER_TAG=$([[ -z "$CIRCLE_TAG" ]] && echo $CIRCLE_BRANCH || echo ${CIRCLE_TAG} | sed 's/^v//')
            RELEASE_TYPE=$([[ -z "$CIRCLE_TAG" ]] && echo "branch" || echo "tag ")
            # Display either:
            # - DOCKER_TAG: master (Git branch)
            # or
            # - DOCKER_TAG: 1.1.2 (Git tag v1.1.2)
            echo "DOCKER_TAG: ${DOCKER_TAG} (Git ${RELEASE_TYPE}${CIRCLE_TAG})"
            docker tag marsha:${CIRCLE_SHA1} fundocker/marsha:${DOCKER_TAG}
            if [[ -n "$CIRCLE_TAG" ]]; then
              docker tag marsha:${CIRCLE_SHA1} fundocker/marsha:latest
            fi
            docker images | grep -E "^fundocker/marsha\s*(${DOCKER_TAG}.*|latest|master)"

      # Publish images to DockerHub
      #
      # Nota bene: logged user (see "Login to DockerHub" step) must have write
      # permission for the project's repository; this also implies that the
      # DockerHub repository already exists.
      - run:
          name: Publish images
          command: |
            DOCKER_TAG=$([[ -z "$CIRCLE_TAG" ]] && echo $CIRCLE_BRANCH || echo ${CIRCLE_TAG} | sed 's/^v//')
            RELEASE_TYPE=$([[ -z "$CIRCLE_TAG" ]] && echo "branch" || echo "tag ")
            # Display either:
            # - DOCKER_TAG: master (Git branch)
            # or
            # - DOCKER_TAG: 1.1.2 (Git tag v1.1.2)
            echo "DOCKER_TAG: ${DOCKER_TAG} (Git ${RELEASE_TYPE}${CIRCLE_TAG})"
            docker push fundocker/marsha:${DOCKER_TAG}
            if [[ -n "$CIRCLE_TAG" ]]; then
              docker push fundocker/marsha:latest
            fi

  hub-ffmpeg-transmux:
    docker:
      - image: cimg/base:2022.04
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    working_directory: ~/marsha
    steps:
      # Checkout repository sources
      - checkout
      # Generate a version.json file describing app release
      - <<: *generate-version-file
      # Activate docker-in-docker
      - setup_remote_docker:
          version: 20.10.11
          docker_layer_caching: true
      - *docker_login
      # Each image is tagged with the current git commit sha1 to avoid
      # collisions in parallel builds.
      - run:
          name: Build production image
          command: |
            export DOCKER_BUILDKIT=1
            docker build \
              -t marsha-ffmpeg-transmux:${CIRCLE_SHA1} \
              src/aws/ffmpeg-transmux-live-image/
      # Tag docker images with the same pattern used in Git (Semantic Versioning)
      #
      # Git tag: v1.0.1
      # Docker tag: 1.0.1(-dev)
      - run:
          name: Tag images
          command: |
            docker images fundocker/marsha-ffmpeg-transmux
            DOCKER_TAG=$([[ -z "$CIRCLE_TAG" ]] && echo $CIRCLE_BRANCH || echo ${CIRCLE_TAG} | sed 's/^v//')
            RELEASE_TYPE=$([[ -z "$CIRCLE_TAG" ]] && echo "branch" || echo "tag ")
            # Display either:
            # - DOCKER_TAG: master (Git branch)
            # or
            # - DOCKER_TAG: 1.1.2 (Git tag v1.1.2)
            echo "DOCKER_TAG: ${DOCKER_TAG} (Git ${RELEASE_TYPE}${CIRCLE_TAG})"
            docker tag marsha-ffmpeg-transmux:${CIRCLE_SHA1} fundocker/marsha-ffmpeg-transmux:${DOCKER_TAG}
            if [[ -n "$CIRCLE_TAG" ]]; then
              docker tag marsha-ffmpeg-transmux:${CIRCLE_SHA1} fundocker/marsha-ffmpeg-transmux:latest
            fi
            docker images | grep -E "^fundocker/marsha-ffmpeg-transmux\s*(${DOCKER_TAG}.*|latest|master)"

      # Publish images to DockerHub
      #
      # Nota bene: logged user (see "Login to DockerHub" step) must have write
      # permission for the project's repository; this also implies that the
      # DockerHub repository already exists.
      - run:
          name: Publish images
          command: |
            DOCKER_TAG=$([[ -z "$CIRCLE_TAG" ]] && echo $CIRCLE_BRANCH || echo ${CIRCLE_TAG} | sed 's/^v//')
            RELEASE_TYPE=$([[ -z "$CIRCLE_TAG" ]] && echo "branch" || echo "tag ")
            # Display either:
            # - DOCKER_TAG: master (Git branch)
            # or
            # - DOCKER_TAG: 1.1.2 (Git tag v1.1.2)
            echo "DOCKER_TAG: ${DOCKER_TAG} (Git ${RELEASE_TYPE}${CIRCLE_TAG})"
            docker push fundocker/marsha-ffmpeg-transmux:${DOCKER_TAG}
            if [[ -n "$CIRCLE_TAG" ]]; then
              docker push fundocker/marsha-ffmpeg-transmux:latest
            fi

  lambda-publish:
    machine:
      image: ubuntu-2004:202107-02
    working_directory: ~/marsha
    steps:
      - checkout
      # Generate a version.json file describing app release
      - <<: *generate-version-file
      - *docker_login
      - run:
          name: Build production image
          command: |
            ./bin/lambda build ${CIRCLE_SHA1}
      # Tag docker images with the same pattern used in Git (Semantic Versioning)
      #
      # Git tag: v1.0.1
      # Docker tag: 1.0.1(-dev)
      - run:
          name: Tag images
          command: |
            docker image ls "${LAMBDA_IMAGE_NAME}:production"
            DOCKER_TAG=$([[ -z "$CIRCLE_TAG" ]] && echo $CIRCLE_BRANCH || echo ${CIRCLE_TAG} | sed 's/^v//')
            RELEASE_TYPE=$([[ -z "$CIRCLE_TAG" ]] && echo "branch" || echo "tag ")
            # Display either:
            # - DOCKER_TAG: master (Git branch)
            # or
            # - DOCKER_TAG: 1.1.2 (Git tag v1.1.2)
            echo "DOCKER_TAG: ${DOCKER_TAG} (Git ${RELEASE_TYPE}${CIRCLE_TAG})"
            ./bin/lambda tag ${DOCKER_TAG} ${CIRCLE_SHA1}
            if [[ -n "$CIRCLE_TAG" ]]; then
              ./bin/lambda tag latest ${CIRCLE_SHA1}
            fi
            docker image ls ${LAMBDA_IMAGE_NAME}

      # Publish images to ECR
      - run:
          name: Publish images
          command: |
            DOCKER_TAG=$([[ -z "$CIRCLE_TAG" ]] && echo $CIRCLE_BRANCH || echo ${CIRCLE_TAG} | sed 's/^v//')
            RELEASE_TYPE=$([[ -z "$CIRCLE_TAG" ]] && echo "branch" || echo "tag ")
            # Display either:
            # - DOCKER_TAG: master (Git branch)
            # or
            # - DOCKER_TAG: 1.1.2 (Git tag v1.1.2)
            echo "DOCKER_TAG: ${DOCKER_TAG} (Git ${RELEASE_TYPE}${CIRCLE_TAG})"
            ./bin/lambda publish ${DOCKER_TAG}
            if [[ -n "$CIRCLE_TAG" ]]; then
              ./bin/lambda publish latest
            fi

workflows:
  version: 2

  marsha:
    jobs:
      # Git jobs
      #
      # Check validity of git history
      - lint-git:
          filters:
            tags:
              only: /.*/

      # Check changelog validity
      - check-changelog:
          filters:
            branches:
              ignore: master
            tags:
              ignore: /.*/
      - lint-changelog:
          filters:
            branches:
              ignore: master
            tags:
              ignore: /.*/

      # Check Renovate configuration
      - check-renovate-configuration:
          filters:
            tags:
              only: /.*/

      # Front-end jobs
      #
      # Build (and later lint and test the front-end app)
      - build-front:
          filters:
            tags:
              only: /.*/
      - lint-front:
          requires:
            - build-front
          filters:
            tags:
              only: /.*/
      - test-front:
          requires:
            - build-front
          filters:
            tags:
              only: /.*/
      - test-website:
          requires:
            - build-front
          filters:
            tags:
              only: /.*/

      # Build mails
      - build-mails:
          filters:
            tags:
              only: /.*/

      # Lambda related jobs
      - build-lambda-docker-and-test-lambda-convert:
          filters:
            tags:
              only: /.*/
      - test-lambda-configure:
          filters:
            tags:
              only: /.*/
      - test-lambda-complete:
          filters:
            tags:
              only: /.*/
      - test-lambda-medialive:
          filters:
            tags:
              only: /.*/
      - test-lambda-mediapackage:
          filters:
            tags:
              only: /.*/
      - test-lambda-elemental-routing:
          filters:
            tags:
              only: /.*/
      - lint-lambda-configure:
          requires:
            - test-lambda-configure
          filters:
            tags:
              only: /.*/
      - lint-lambda-convert:
          requires:
            - build-lambda-docker-and-test-lambda-convert
          filters:
            tags:
              only: /.*/
      - lint-lambda-complete:
          requires:
            - test-lambda-complete
          filters:
            tags:
              only: /.*/
      - lint-lambda-medialive:
          requires:
            - test-lambda-medialive
          filters:
            tags:
              only: /.*/
      - lint-lambda-mediapackage:
          requires:
            - test-lambda-mediapackage
          filters:
            tags:
              only: /.*/
      - lint-lambda-elemental-routing:
          requires:
            - test-lambda-elemental-routing
          filters:
            tags:
              only: /.*/

      # Docker jobs
      #
      # Build, lint and test production and development Docker images
      # (debian-based)
      - build-docker:
          filters:
            tags:
              only: /.*/
      - build-ffmpeg-transmux-docker:
          filters:
            tags:
              only: /.*/
      - build-back:
          filters:
            tags:
              only: /.*/
      - lint-back:
          requires:
            - build-back
          filters:
            tags:
              only: /.*/
      - test-back:
          requires:
            - build-back
            - build-mails
            - build-back-i18n
          filters:
            tags:
              only: /.*/
      - test-e2e:
          name: test-e2e-firefox
          browser: firefox
          browser_channel: firefox
          filters:
            tags:
              only: /.*/
      - test-e2e:
          name: test-e2e-chromium
          browser: chromium
          browser_channel: chrome
          filters:
            tags:
              only: /.*/
      - test-e2e:
          name: test-e2e-webkit
          browser: webkit
          browser_channel: webkit
          filters:
            tags:
              only: /.*/

      # i18n jobs
      #
      # Extract strings and upload them to our translation management SaaS
      - build-back-i18n:
          requires:
            - build-back
            - build-mails
          filters:
            tags:
              only: /.*/
      - i18n:
          requires:
            - build-front
            - build-back-i18n
          filters:
            branches:
              only: master

      # DockerHub publication.
      #
      # Publish docker images only if all build, lint and test jobs succeed and
      # it has been tagged with a tag starting with the letter v
      - hub:
          requires:
            - build-docker
            - test-back
          filters:
            branches:
              only: master
            tags:
              only: /^v.*/

      - hub-ffmpeg-transmux:
          requires:
            - build-ffmpeg-transmux-docker
          filters:
            branches:
              only: master
            tags:
              only: /^v.*/

      - lambda-publish:
          requires:
            - build-lambda-docker-and-test-lambda-convert
            - test-lambda-complete
            - test-lambda-configure
            - test-lambda-medialive
            - test-lambda-mediapackage
            - test-lambda-elemental-routing
          filters:
            branches:
              only: master
            tags:
              only: /^v.*/
