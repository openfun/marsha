# Configuration file anchors
generate-version-file: &generate-version-file
  run:
    name: Create a version.json
    command: |
      # Create a version.json Ã -la-mozilla
      # https://github.com/mozilla-services/Dockerflow/blob/master/docs/version_object.md
      printf '{"commit":"%s","version":"%s","source":"https://github.com/%s/%s","build":"%s"}\n' \
        "$CIRCLE_SHA1" \
        "$CIRCLE_TAG" \
        "$CIRCLE_PROJECT_USERNAME" \
        "$CIRCLE_PROJECT_REPONAME" \
        "$CIRCLE_BUILD_URL" > version.json

version: 2
jobs:
  # Git jobs
  # Check that the git history is clean and complies with our expectations
  lint-git:
    machine: true
    working_directory: ~/marsha
    steps:
      - checkout
      - run:
          name: Check presence of all commit authors in CONTRIBUTORS.md file
          command: |
            for contributor in $(git log --pretty="format:%ae" 33587e4faee29ef55d0c8e8dd96eaa4989ea714a.. | sort | uniq ); do grep $contributor CONTRIBUTORS.md; done
      - run:
          name: Check absence of fixup commits
          command: |
            ! git log | grep 'fixup!'
      - run:
          name: Install gitlint
          command: |
            pip install requests gitlint
      - run:
          name: lint commit messages added to master
          command: |
            gitlint --commits origin/master..HEAD

  # Docker/back-end jobs
  # Build job
  # Build the Docker image ready for production
  build:
    # We use the machine executor, i.e. a VM, not a container
    machine:
      # Cache docker layers so that we strongly speed up this job execution
      docker_layer_caching: true
    working_directory: ~/marsha
    steps:
      # Checkout repository sources
      - checkout
      # Generate a version.json file describing app release
      - <<: *generate-version-file
      # Each image is tagged with the current git commit sha1 to avoid
      # collisions in parallel builds.
      - run:
          name: Build production image
          command: |
            docker build \
              -t marsha:${CIRCLE_SHA1} \
              .
      - run:
          name: Check built image availability
          command: docker images "marsha:${CIRCLE_SHA1}*"
      - run:
          name: Test running production image
          command: ./docker/tests/run.sh marsha ${CIRCLE_SHA1}
      - run:
          name: Test statics location in production image
          command: ./docker/tests/statics.sh marsha ${CIRCLE_SHA1}
      # Since we cannot rely on CircleCI's Docker layers cache (for obscure
      # reasons some subsequent jobs will benefit from a previous job cache and
      # some others won't), we choose to save built docker images in cached
      # directories. This ensures that we will be able to load built docker
      # images in subsequent jobs.
      - run:
          name: Store docker image in cache
          command: |
            docker save \
              -o docker/images/marsha.tar \
              marsha:${CIRCLE_SHA1}
      - save_cache:
          paths:
            - ~/marsha/docker/images/
          key: docker-debian-images-{{ .Revision }}

  # Build dev job
  # Build the Docker image ready for development
  build-dev:
    machine:
      docker_layer_caching: true
    working_directory: ~/marsha
    steps:
      - checkout
      - restore_cache:
          keys:
            - docker-debian-images-{{ .Revision }}
      - run:
          name: Load images to docker engine
          command: |
            docker load < docker/images/marsha.tar
      - run:
          name: List available images
          command: docker images "marsha:${CIRCLE_SHA1}*"
      # Generate a version.json file describing app release
      - <<: *generate-version-file
      # Development image build, it uses the dev Dockerfile file
      - run:
          name: Build development image
          command: |
            docker build \
              -t marsha:${CIRCLE_SHA1}-dev \
              -f docker/images/dev/Dockerfile \
              --build-arg BASE_TAG=${CIRCLE_SHA1} \
              .
      - run:
          name: Check built image availability
          command: docker images "marsha:${CIRCLE_SHA1}*"
      - run:
          name: Store docker image in cache
          command: |
            docker save \
              -o docker/images/dev/marsha.tar \
              marsha:${CIRCLE_SHA1} \
              marsha:${CIRCLE_SHA1}-dev
      - save_cache:
          paths:
            - ~/marsha/docker/images/dev/
          key: docker-debian-images-dev-{{ .Revision }}

  lint-isort:
    machine: true
    working_directory: ~/marsha
    steps:
      - checkout
      - restore_cache:
          keys:
            - docker-debian-images-dev-{{ .Revision }}
      - run:
          name: Load images to docker engine
          command: |
            docker load < docker/images/dev/marsha.tar
      - run:
          name: Lint code with isort
          command: |
            docker-compose \
              -p marsha-test \
              -f docker/compose/ci/docker-compose.yml \
              --project-directory . \
              run --rm --no-deps app \
                isort --recursive --check-only marsha

  lint-flake8:
    machine: true
    working_directory: ~/marsha
    steps:
      - checkout
      - restore_cache:
          keys:
            - docker-debian-images-dev-{{ .Revision }}
      - run:
          name: Load images to docker engine
          command: |
            docker load < docker/images/dev/marsha.tar
      - run:
          name: Lint code with flake8
          command: |
            docker-compose \
              -p marsha-test \
              -f docker/compose/ci/docker-compose.yml \
              --project-directory . \
              run --rm --no-deps app \
                flake8 marsha

  lint-pylint:
    machine: true
    working_directory: ~/marsha
    steps:
      - checkout
      - restore_cache:
          keys:
            - docker-debian-images-dev-{{ .Revision }}
      - run:
          name: Load images to docker engine
          command: |
            docker load < docker/images/dev/marsha.tar
      - run:
          name: Lint code with pylint
          command: |
            docker-compose \
              -p marsha-test \
              -f docker/compose/ci/docker-compose.yml \
              --project-directory . \
              run --rm --no-deps app \
                pylint --rcfile=pylintrc marsha

  lint-black:
    machine: true
    working_directory: ~/marsha
    steps:
      - checkout
      - restore_cache:
          keys:
            - docker-debian-images-dev-{{ .Revision }}
      - run:
          name: Load images to docker engine
          command: |
            docker load < docker/images/dev/marsha.tar
      - run:
          name: Lint code with black
          command: |
            docker-compose \
              -p marsha-test \
              -f docker/compose/ci/docker-compose.yml \
              --project-directory . \
              run --rm --no-deps app \
                black marsha/ --check

  test-back:
    machine: true
    working_directory: ~/marsha
    steps:
      - checkout
      - restore_cache:
          keys:
            - docker-debian-images-dev-{{ .Revision }}
      - run:
          name: Load images to docker engine
          command: |
            docker load < docker/images/dev/marsha.tar
      # Run back-end (Django) test suite
      #
      # Nota bene: to run the django test suite, we need to ensure that the
      # PostgreSQL service is up and ready. To achieve this,
      # we wrap the command execution with dockerize, a tiny tool
      # installed in the development image. In our case, dockerize will wait
      # up to one minute until the database container is answering on port 5432.
      - run:
          name: Run tests
          command: |
            docker-compose \
              -p marsha-test \
              -f docker/compose/ci/docker-compose.yml \
              --project-directory . \
              run --rm app \
                dockerize \
                  -wait tcp://db:5432 \
                  -timeout 60s \
                    python manage.py test

  # ---- Front-end jobs ----
  build-front:
    docker:
      - image: circleci/node:9-browsers
    working_directory: ~/marsha/src/frontend
    steps:
      - checkout:
          path: ~/marsha
      - restore_cache:
          keys:
            - v3-front-dependencies-{{ checksum "package.json" }}
            - v3-front-dependencies-
      # If the yarn.lock file is not up-to-date with the package.json file,
      # using the --frozen-lockfile should fail.
      - run:
          name: Install front-end dependencies
          command: yarn install --frozen-lockfile
      - run:
          name: Build front-end application
          command: yarn build
      - save_cache:
          paths:
            - ./node_modules
          key: v3-front-dependencies-{{ checksum "package.json" }}

  lint-front-tslint:
    docker:
      - image: circleci/node:9-browsers
    working_directory: ~/marsha/src/frontend
    steps:
      - checkout:
          path: ~/marsha
      - restore_cache:
          keys:
            - v3-front-dependencies-{{ checksum "package.json" }}
      - run:
          name: Lint code with tslint
          command: yarn lint

  lint-front-prettier:
    docker:
      - image: circleci/node:9-browsers
    working_directory: ~/marsha/src/frontend
    steps:
      - checkout:
          path: ~/marsha
      - restore_cache:
          keys:
            - v3-front-dependencies-{{ checksum "package.json" }}
      - run:
          name: Lint code with prettier
          command: yarn prettier --list-different "**/*.+(ts|tsx|json|js|jsx)" --ignore-path "../.prettierignore"

  test-front:
    docker:
      - image: circleci/node:9-browsers
    working_directory: ~/marsha/src/frontend
    steps:
      - checkout:
          path: ~/marsha
      - restore_cache:
          keys:
            - v3-front-dependencies-{{ checksum "package.json" }}
      - run:
          name: Run tests
          command: yarn test

  # ---- Lambda related jobs ----
  test-lambda-configure:
    docker:
      - image: circleci/node:8.11.3
    working_directory: ~/marsha/src/aws/lambda-configure
    steps:
      - checkout:
          path: ~/marsha
      - restore_cache:
          keys:
            - v3-lambdas-configure-dependencies-{{ checksum "package.json" }}
            - v3-lambdas-configure-dependencies-
      - run:
          name: Install configure lambda dependencies
          command: yarn install --ignore-engines --frozen-lockfile
      - run:
          name: Run configure lambda tests
          command: yarn test
      - save_cache:
          paths:
            - ./node_modules
          key: v3-lambdas-configure-dependencies-{{ checksum "package.json" }}

  test-lambda-encode:
    docker:
      - image: circleci/node:8.11.3
    working_directory: ~/marsha/src/aws/lambda-encode
    steps:
      - checkout:
          path: ~/marsha
      - restore_cache:
          keys:
            - v3-lambdas-encode-dependencies-{{ checksum "package.json" }}
            - v3-lambdas-encode-dependencies-
      - run:
          name: Install encode lambda dependencies
          command: yarn install --ignore-engines --frozen-lockfile
      - run:
          name: Run encode lambda tests
          command: yarn test
      - save_cache:
          paths:
            - ./node_modules
          key: v3-lambdas-encode-dependencies-{{ checksum "package.json" }}

  test-lambda-update-state:
    docker:
      - image: circleci/node:8.11.3
    working_directory: ~/marsha/src/aws/lambda-update-state
    steps:
      - checkout:
          path: ~/marsha
      - restore_cache:
          keys:
            - v3-lambdas-update-state-dependencies-{{ checksum "package.json" }}
            - v3-lambdas-update-state-dependencies-
      - run:
          name: Install update-state lambda dependencies
          command: yarn install --ignore-engines --frozen-lockfile
      - run:
          name: Run update-state lambda tests
          command: yarn test
      - save_cache:
          paths:
            - ./node_modules
          key: v3-lambdas-update-state-dependencies-{{ checksum "package.json" }}

  # ---- Alpine jobs ----
  build-alpine:
    machine:
      docker_layer_caching: true
    working_directory: ~/marsha
    steps:
      - checkout
      # Generate a version.json file describing app release
      - <<: *generate-version-file
      - run:
          name: Build alpine production image
          command: |
            docker build \
              -t marsha:${CIRCLE_SHA1}-alpine \
              -f docker/images/alpine/Dockerfile \
              .
      - run:
          name: Build alpine development image
          command: |
            docker build \
              -t marsha:${CIRCLE_SHA1}-alpine-dev \
              -f docker/images/alpine/dev/Dockerfile \
              --build-arg BASE_TAG=${CIRCLE_SHA1}-alpine \
              .
      - run:
          name: List available images
          command: docker images marsha
      - run:
          name: Test running alpine production image
          command: ./docker/tests/run.sh marsha ${CIRCLE_SHA1}-alpine
      - run:
          name: Test statics location in alpine production image
          command: ./docker/tests/statics.sh marsha ${CIRCLE_SHA1}-alpine
      - run:
          name: Store docker image in cache
          command: |
            docker save \
              -o docker/images/alpine/marsha.tar \
              marsha:${CIRCLE_SHA1}-alpine \
              marsha:${CIRCLE_SHA1}-alpine-dev
      - save_cache:
          paths:
            - ~/marsha/docker/images/
          key: docker-alpine-images-dev-{{ .Revision }}

  test-alpine:
    machine: true
    working_directory: ~/marsha
    steps:
      - checkout
      - restore_cache:
          keys:
            - docker-alpine-images-dev-{{ .Revision }}
      - run:
          name: Load images to docker engine
          command: |
            docker load < docker/images/alpine/marsha.tar
      - run:
          name: Run tests
          command: |
            IMAGE_SUFFIX="-alpine" \
            docker-compose \
              -p marsha-test \
              -f docker/compose/ci/docker-compose.yml \
              --project-directory . \
              run --rm app \
                dockerize \
                  -wait tcp://db:5432 \
                  -timeout 60s \
                    python manage.py test

  # ---- DockerHub publication job ----
  hub:
    machine: true
    working_directory: ~/marsha
    steps:
      - checkout
      - restore_cache:
          keys:
            - docker-debian-images-dev-{{ .Revision }}
      - restore_cache:
          keys:
            - docker-alpine-images-dev-{{ .Revision }}
      # Load all built images in all flavors
      - run:
          name: Load images to docker engine
          command: |
            docker load < docker/images/dev/marsha.tar
            docker load < docker/images/alpine/marsha.tar

      # Login to DockerHub to Publish new images
      #
      # Nota bene: you'll need to define the following secrets environment vars
      # in CircleCI interface:
      #
      #   - DOCKER_USER
      #   - DOCKER_PASS
      - run:
          name: Login to DockerHub
          command: echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin

      # Tag docker images with the same pattern used in Git (Semantic Versioning)
      #
      # Git tag: v1.0.1
      # Docker tag: 1.0.1(-alpine)(-dev)
      - run:
          name: Tag images
          command: |
            docker images fundocker/marsha
            DOCKER_TAG=$(echo ${CIRCLE_TAG} | sed 's/^v//')
            echo "DOCKER_TAG: ${DOCKER_TAG} (from Git tag: ${CIRCLE_TAG})"
            docker tag marsha:${CIRCLE_SHA1} fundocker/marsha:latest
            docker tag marsha:${CIRCLE_SHA1} fundocker/marsha:${DOCKER_TAG}
            docker tag marsha:${CIRCLE_SHA1}-dev fundocker/marsha:${DOCKER_TAG}-dev
            docker tag marsha:${CIRCLE_SHA1}-alpine fundocker/marsha:alpine
            docker tag marsha:${CIRCLE_SHA1}-alpine fundocker/marsha:${DOCKER_TAG}-alpine
            docker tag marsha:${CIRCLE_SHA1}-alpine-dev fundocker/marsha:${DOCKER_TAG}-alpine-dev
            docker images "fundocker/marsha:${DOCKER_TAG}*"

      # Publish images to DockerHub
      #
      # Nota bene: logged user (see "Login to DockerHub" step) must have write
      # permission for the project's repository; this also implies that the
      # DockerHub repository already exists.
      - run:
          name: Publish images
          command: |
            DOCKER_TAG=$(echo ${CIRCLE_TAG} | sed 's/^v//')
            echo "DOCKER_TAG: ${DOCKER_TAG} (from Git tag: ${CIRCLE_TAG})"
            docker push fundocker/marsha:latest
            docker push fundocker/marsha:${DOCKER_TAG}
            docker push fundocker/marsha:${DOCKER_TAG}-dev
            docker push fundocker/marsha:alpine
            docker push fundocker/marsha:${DOCKER_TAG}-alpine
            docker push fundocker/marsha:${DOCKER_TAG}-alpine-dev

workflows:
  version: 2

  marsha:
    jobs:
      # Git jobs
      #
      # Check validity of git history
      - lint-git:
          filters:
            tags:
              only: /.*/

      # Front-end jobs
      #
      # Build (and later lint and test the front-end app)
      - build-front:
          filters:
            tags:
              only: /.*/
      - lint-front-tslint:
          requires:
            - build-front
          filters:
            tags:
              only: /.*/
      - lint-front-prettier:
          requires:
            - build-front
          filters:
            tags:
              only: /.*/
      - test-front:
          requires:
            - build-front
          filters:
            tags:
              only: /.*/

      # Lambda related jobs
      - test-lambda-configure:
          filters:
            tags:
              only: /.*/
      - test-lambda-encode:
          filters:
            tags:
              only: /.*/
      - test-lambda-update-state:
          filters:
            tags:
              only: /.*/

      # Docker jobs
      #
      # Build, lint and test production and development Docker images
      # (debian-based)
      - build:
          filters:
            tags:
              only: /.*/
      - build-dev:
          requires:
            - build
          filters:
            tags:
              only: /.*/
      - lint-black:
          requires:
            - build-dev
          filters:
            tags:
              only: /.*/
      - lint-isort:
          requires:
            - build-dev
          filters:
            tags:
              only: /.*/
      - lint-flake8:
          requires:
            - build-dev
          filters:
            tags:
              only: /.*/
      - lint-pylint:
          requires:
            - build-dev
          filters:
            tags:
              only: /.*/
      - test-back:
          requires:
            - build-dev
          filters:
            tags:
              only: /.*/

      # Docker alpine jobs
      #
      # Build and run tests in alpine based images
      - build-alpine:
          filters:
            tags:
              only: /.*/
      - test-alpine:
          requires:
            - build-alpine
          filters:
            tags:
              only: /.*/

      # DockerHub publication.
      #
      # Publish docker images only if all build, lint and test jobs succeed and
      # it has been tagged with a tag starting with the letter v
      - hub:
          requires:
            - test-back
            - test-alpine
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
