version: "3.4"

services:
  db:
    image: postgres:10.3
    env_file: env.d/${ENV_FILE:-development}
    volumes:
      - ./docker/files/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
    ports:
      - "5452:5432"

  # We use our production image as a basis for the development image, hence, we
  # define a "base" service upon which the "app" service depends to force
  # marsha:latest build.
  base:
    build: .
    image: marsha:latest
    # Override the default command so that the container exists immediately when
    # it is run (no server).
    command: echo "I should exit now. Bye."

  app:
    build:
      context: .
      dockerfile: ./docker/images/dev/Dockerfile
    image: marsha:dev
    env_file:
      - env.d/${ENV_FILE:-development}
    # Override production container command that runs gunicorn in favor of the
    # django development server
    command: >
      python manage.py runserver 0.0.0.0:8000
    ports:
      - "8060:8000"
    volumes:
      - .:/app
      - ./data/static:/data/static
      - ./data/media:/data/media
    depends_on:
      - "base"
      - "db"
    stdin_open: true
    tty: true

  ngrok:
    image: wernight/ngrok
    command: ngrok http app:8000
    ports:
      - 4040:4040

  crowdin:
    image: crowdin/cli:3.2.1
    volumes:
      - ".:/app"
    env_file:
      - env.d/development
    working_dir: /app

  node:
    image: node:10
    volumes:
      - ".:/app"
    working_dir: /app/src/frontend

  dockerize:
    image: jwilder/dockerize

  lambda_base:
    build:
      context: ./src/aws/
      target: development
    image: marsha/lambda:dev
    # Override the default command so that the container exists immediately when
    # it is run (no server).
    entrypoint: ""
    command: echo "I should exit now. Bye."

  lambda_encode:
    image: marsha/lambda:dev
    working_dir: /var/task/lambda-encode
    command: ["/var/task/lambda-encode/index.handler"]
    ports:
      - 9000:8080
    env_file:
      - env.d/lambda
    volumes:
      - "./src/aws/lambda-encode:/var/task/lambda-encode"
      - "./src/aws/utils:/var/task/utils"
    depends_on:
      - lambda_base

  lambda_complete:
    image: marsha/lambda:dev
    working_dir: /var/task/lambda-complete
    command: ["/var/task/lambda-complete/index.handler"]
    ports:
      - 9001:8080
    env_file:
      - env.d/lambda
    volumes:
      - "./src/aws/lambda-complete:/var/task/lambda-complete"
      - "./src/aws/utils:/var/task/utils"
      - "./src/.prettierrc:/var/task/.prettierrc"
    depends_on:
      - lambda_base

  lambda_configure:
    image: marsha/lambda:dev
    working_dir: /var/task/lambda-configure
    command: ["/var/task/lambda-configure/index.handler"]
    ports:
      - 9002:8080
    env_file:
      - env.d/lambda
    volumes:
      - "./src/aws/lambda-configure:/var/task/lambda-configure"
      - "./src/.prettierrc:/var/task/.prettierrc"
    depends_on:
      - lambda_base

  lambda_medialive:
    image: marsha/lambda:dev
    working_dir: /var/task/lambda-medialive
    command: ["/var/task/lambda-medialive/index.handler"]
    ports:
      - 9003:8080
    env_file:
      - env.d/lambda
    volumes:
      - "./src/aws/lambda-medialive:/var/task/lambda-medialive"
      - "./src/aws/utils:/var/task/utils"
      - "./src/.prettierrc:/var/task/.prettierrc"
    depends_on:
      - lambda_base

  lambda_mediapackage:
    image: marsha/lambda:dev
    working_dir: /var/task/lambda-mediapackage
    command: ["/var/task/lambda-mediapackage/index.handler"]
    ports:
      - 9006:8080
    env_file:
      - env.d/lambda
    volumes:
      - "./src/aws/lambda-mediapackage:/var/task/lambda-mediapackage"
      - "./src/aws/utils:/var/task/utils"
      - "./src/.prettierrc:/var/task/.prettierrc"
      - "./transmuxed_video:/mnt/transmuxed_video"
    depends_on:
      - lambda_base

  lambda_elemental_routing:
    image: marsha/lambda:dev
    working_dir: /var/task/lambda-elemental-routing
    command: ["/var/task/lambda-elemental-routing/index.handler"]
    ports:
      - 9004:8080
    env_file:
      - env.d/lambda
    environment:
      - MEDIALIVE_LAMBDA_NAME=marsha-medialive
    volumes:
      - "./src/aws/lambda-elemental-routing:/var/task/lambda-elemental-routing"
      - "./src/aws/utils:/var/task/utils"
      - "./src/.prettierrc:/var/task/.prettierrc"
    depends_on:
      - lambda_base

  lambda_migrate:
    image: marsha/lambda:dev
    working_dir: /var/task/lambda-migrate
    command: ["/var/task/lambda-migrate/index.handler"]
    ports:
      - 9005:8080
    env_file:
      - env.d/lambda
    volumes:
      - "./src/aws/lambda-migrate:/var/task/lambda-migrate"
      - "./src/aws/utils:/var/task/utils"
      - "./src/.prettierrc:/var/task/.prettierrc"
    depends_on:
      - lambda_base

  prosody-app:
    image: fundocker/prosody
    ports: 
      - 5222:5222
    volumes:
      - "./docker/files/etc/prosody:/etc/prosody"
    depends_on: 
      - db

  prosody-nginx:
    image: nginx
    ports: 
      - 8061:80
    volumes:
      - "./docker/files/etc/nginx/conf.d:/etc/nginx/conf.d"
    depends_on: 
      - prosody-app
    links:
      - "prosody-app:prosody"
