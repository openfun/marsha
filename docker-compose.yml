version: "3"

services:
  db:
    image: postgres:10.3
    env_file: env.d/development
    ports:
      - "5452:5432"
    networks:
      - marsha

  # We use our production image as a basis for the development image, hence, we
  # define a "base" service upon which the "app" service depends to force
  # marsha:latest build.
  base:
    build: .
    image: marsha:latest
    # Override the default command so that the container exists immediately when
    # it is run (no server).
    command: echo "I should exit now. Bye."

  app:
    build:
      context: .
      dockerfile: ./docker/images/dev/Dockerfile
    image: marsha:dev
    env_file:
      - env.d/development
    # Override production container command that runs gunicorn in favor of the
    # django development server (wrapped by dockerize to ensure the db is ready
    # to accept connections before running the development server)
    command: >
      dockerize -wait tcp://db:5432 -timeout 60s python manage.py runserver 0.0.0.0:8000
    ports:
      - "8060:8000"
    volumes:
      - .:/app
      - ./data/static:/data/static
      - ./data/media:/data/media
    depends_on:
      - "base"
      - "db"
    networks:
      - marsha

  # ------------------------
  # Learning locker services
  # see https://github.com/up2university/learninglocker2
  mongodb:
    image: mongo:3.2
    # We use WiredTiger in all environments. In development environments we use small files
    # to conserve disk space, and disable the journal for a minor performance gain.
    # See https://docs.mongodb.com/v3.0/reference/program/mongod/#options for complete details.
    command: mongod --smallfiles --nojournal --storageEngine wiredTiger
    networks:
      - marsha

  mailcatcher:
    image: sj26/mailcatcher:latest
    ports:
      - "1080:1080"
    networks:
      - marsha

  redis:
    image: redis:4-alpine
    networks:
      - marsha

  xapi:
    image: learninglocker/xapi-service:2.2.14
    restart: unless-stopped
    environment:
      - MONGO_URL=mongodb://mongodb:27017/learninglocker_v2
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - mongodb
      - redis
      - api
      - ui
      - worker
    networks:
      - marsha

  api:
    image: fundocker/learninglocker:v2.6.2
    env_file:
      - env.d/learninglocker
    command: "node api/dist/server"
    depends_on:
      - mongodb
      - redis
      - mailcatcher
    networks:
      - marsha


  ui:
    image: fundocker/learninglocker:v2.6.2
    env_file:
      - env.d/learninglocker
    command: "node ui/dist/server"
    depends_on:
      - mongodb
      - redis
      - api
    networks:
      - marsha

  # FIXME: not sure we need this service for development
  worker:
    image: fundocker/learninglocker:v2.6.2
    env_file:
      - env.d/learninglocker
    command: "node worker/dist/server"
    depends_on:
      - mongodb
      - redis
      - mailcatcher
    networks:
      - marsha

  nginx:
    image: nginx:1.15
    env_file:
      - env.d/learninglocker_nginx
    volumes:
      - ./docker/compose/nginx/nginx.conf.template:/etc/nginx/conf.d/default.conf.template
    command: /bin/bash -c "envsubst < /etc/nginx/conf.d/default.conf.template > /etc/nginx/conf.d/default.conf && exec nginx -g 'daemon off;'"
    depends_on:
      - ui
      - xapi
    ports:
      - "8080:80"
    networks:
      marsha:
        aliases:
          - xapi.marsha

# This network is here to allow us to create aliases on some container's network.
# Creating an alias will allow us to create a real URL and use it later in Django.
networks:
    marsha:
