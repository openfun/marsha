# Generated by Django 2.2.5 on 2019-10-01 08:12

import json
import re

from django.conf import settings
from django.db import migrations

import boto3


def escape_timed_text_tracks(apps, schema_editor):
    """Migration escaping existing timed text tracks.

    In this migration we are looking for all existing timed text tracks already uploaded
    on the S3 source bucket and invoke the marsha-encode lambda on them in order to escape every
    sentences.
    """
    if not settings.SHOULD_RUN_TIMEDTEXT_TRACKS_ESCAPING_MIGRATION:
        """Abort the migration if this setting is set to False."""
        return

    marsha_s3 = boto3.client(
        "s3",
        region_name=settings.AWS_S3_REGION_NAME,
        aws_access_key_id=settings.AWS_ACCESS_KEY_ID,
        aws_secret_access_key=settings.AWS_SECRET_ACCESS_KEY,
    )
    marsha_lambda = boto3.client(
        "lambda",
        region_name=settings.AWS_S3_REGION_NAME,
        aws_access_key_id=settings.AWS_ACCESS_KEY_ID,
        aws_secret_access_key=settings.AWS_SECRET_ACCESS_KEY,
    )
    paginator = marsha_s3.get_paginator("list_objects")
    response_iterator = paginator.paginate(Bucket=settings.AWS_SOURCE_BUCKET_NAME)

    regex = re.compile(r"^.*\/timedtexttrack\/.*$")

    for response in response_iterator:
        for ttt in response.get("Contents"):
            if regex.match(ttt.get("Key")):
                marsha_lambda.invoke(
                    InvocationType="Event",
                    FunctionName=settings.AWS_LAMBDA_ENCODE_NAME,
                    Payload=json.dumps(
                        {
                            "Records": [
                                {
                                    "s3": {
                                        "object": {"key": ttt.get("Key")},
                                        "bucket": {
                                            "name": settings.AWS_SOURCE_BUCKET_NAME
                                        },
                                    }
                                }
                            ]
                        }
                    ),
                )


def escape_timed_text_tracks_reverse(apps, schema_editor):
    """In order to accept rollback we have to create a reverse function.

    This function does nothing, we can't undo the escape operation and there is
    no real reason to do that.
    """


class Migration(migrations.Migration):

    dependencies = [("core", "0015_auto_20190904_1234")]

    operations = [
        migrations.RunPython(escape_timed_text_tracks, escape_timed_text_tracks_reverse)
    ]
