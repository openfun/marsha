# Generated by Django 3.2.9 on 2021-12-08 09:08

import django.contrib.postgres.fields
from django.db import migrations, models
import django.utils.timezone


def migrate_is_registered(apps, schema_editor):
    """Update existing records to set is_registered to False."""
    Liveregistrations = apps.get_model("core", "Liveregistration")
    Liveregistrations.objects.filter(is_registered=False).update(is_registered=True)


class Migration(migrations.Migration):

    dependencies = [
        ("core", "0028_auto_20211129_1843"),
    ]

    operations = [
        migrations.AddField(
            model_name="liveregistration",
            name="is_registered",
            field=models.BooleanField(
                default=False,
                help_text="Is the user registered?",
                verbose_name="is the user registered",
            ),
        ),
        migrations.AddField(
            model_name="liveregistration",
            name="live_attendance",
            field=models.JSONField(
                blank=True,
                help_text="Live online presence",
                null=True,
                verbose_name="Live attendance",
            ),
        ),
        migrations.AddField(
            model_name="liveregistration",
            name="username",
            field=models.CharField(
                blank=True, max_length=155, null=True, verbose_name="Username"
            ),
        ),
        migrations.AlterField(
            model_name="liveregistration",
            name="email",
            field=models.EmailField(
                blank=True,
                db_index=True,
                max_length=254,
                null=True,
                verbose_name="email address",
            ),
        ),
        migrations.AlterField(
            model_name="liveregistration",
            name="lti_user_id",
            field=models.CharField(
                blank=True,
                db_index=True,
                help_text="Unique identifier for the user on the tool consumer, only present for lti users.",
                max_length=150,
                null=True,
                verbose_name="LTI user identifier",
            ),
        ),
        migrations.AddConstraint(
            model_name="liveregistration",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(("email__isnull", True), ("is_registered", False)),
                    ("email__isnull", False),
                    _connector="OR",
                ),
                name="liveregistration_email_is_registered",
            ),
        ),
        migrations.AddConstraint(
            model_name="liveregistration",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(
                        ("consumer_site__isnull", False),
                        ("email__isnull", True),
                        ("lti_user_id__isnull", False),
                    ),
                    ("email__isnull", False),
                    _connector="OR",
                ),
                name="liveregistration_email_or_context_id_user_id",
            ),
        ),
        migrations.RunPython(migrate_is_registered),
    ]
