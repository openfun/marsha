# Generated by Django 2.0 on 2018-11-23 21:25

import uuid

from django.conf import settings
import django.contrib.auth.validators
import django.contrib.sites.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone

import marsha.core.managers
import marsha.core.models.base


class Migration(migrations.Migration):

    initial = True

    dependencies = [("auth", "0009_alter_user_last_name_max_length")]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=30, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("deleted", models.DateTimeField(editable=False, null=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="primary key for the record as UUID",
                        primary_key=True,
                        serialize=False,
                        verbose_name="id",
                    ),
                ),
                (
                    "created_on",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="date and time at which a record was created",
                        verbose_name="created on",
                    ),
                ),
                (
                    "updated_on",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="date and time at which a record was last updated",
                        verbose_name="updated on",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "db_table": "user",
            },
            managers=[("objects", marsha.core.managers.UserManager())],
        ),
        migrations.CreateModel(
            name="AudioTrack",
            fields=[
                ("deleted", models.DateTimeField(editable=False, null=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="primary key for the record as UUID",
                        primary_key=True,
                        serialize=False,
                        verbose_name="id",
                    ),
                ),
                (
                    "created_on",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="date and time at which a record was created",
                        verbose_name="created on",
                    ),
                ),
                (
                    "updated_on",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="date and time at which a record was last updated",
                        verbose_name="updated on",
                    ),
                ),
                (
                    "language",
                    models.CharField(
                        choices=[("en", "english"), ("fr", "french")],
                        help_text="language of this track",
                        max_length=5,
                        verbose_name="track language",
                    ),
                ),
                (
                    "uploaded_on",
                    models.DateTimeField(
                        blank=True,
                        help_text="datetime at which the active version of the video was uploaded.",
                        null=True,
                        verbose_name="uploaded on",
                    ),
                ),
                (
                    "state",
                    models.CharField(
                        choices=[
                            ("pending", "pending"),
                            ("processing", "processing"),
                            ("error", "error"),
                            ("ready", "ready"),
                        ],
                        default="pending",
                        help_text="state of the upload and transcoding pipeline in AWS.",
                        max_length=20,
                        verbose_name="state",
                    ),
                ),
            ],
            options={
                "verbose_name": "audio track",
                "verbose_name_plural": "audio tracks",
                "db_table": "audio_track",
            },
        ),
        migrations.CreateModel(
            name="ConsumerSite",
            fields=[
                ("deleted", models.DateTimeField(editable=False, null=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="primary key for the record as UUID",
                        primary_key=True,
                        serialize=False,
                        verbose_name="id",
                    ),
                ),
                (
                    "created_on",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="date and time at which a record was created",
                        verbose_name="created on",
                    ),
                ),
                (
                    "updated_on",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="date and time at which a record was last updated",
                        verbose_name="updated on",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="name of the consumer site",
                        max_length=50,
                        verbose_name="display name",
                    ),
                ),
                (
                    "domain",
                    models.CharField(
                        help_text="base domain allowed for consumer site.",
                        max_length=100,
                        validators=[
                            django.contrib.sites.models._simple_domain_name_validator
                        ],
                        verbose_name="domain name",
                    ),
                ),
            ],
            options={
                "verbose_name": "consumer site",
                "verbose_name_plural": "consumer sites",
                "db_table": "consumer_site",
            },
        ),
        migrations.CreateModel(
            name="ConsumerSiteAccess",
            fields=[
                ("deleted", models.DateTimeField(editable=False, null=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="primary key for the record as UUID",
                        primary_key=True,
                        serialize=False,
                        verbose_name="id",
                    ),
                ),
                (
                    "created_on",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="date and time at which a record was created",
                        verbose_name="created on",
                    ),
                ),
                (
                    "updated_on",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="date and time at which a record was last updated",
                        verbose_name="updated on",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("administrator", "administrator"),
                            ("instructor", "instructor"),
                            ("student", "student"),
                        ],
                        default="administrator",
                        help_text="role granted to the user on the consumer site",
                        max_length=20,
                        verbose_name="role",
                    ),
                ),
                (
                    "consumer_site",
                    models.ForeignKey(
                        help_text="consumer site to which the user has access",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_accesses",
                        to="core.ConsumerSite",
                        verbose_name="site",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="user with access to the consumer site",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="consumersite_accesses",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="user",
                    ),
                ),
            ],
            options={
                "verbose_name": "consumer site access",
                "verbose_name_plural": "consumer site accesses",
                "db_table": "consumersite_access",
            },
        ),
        migrations.CreateModel(
            name="ConsumerSiteOrganization",
            fields=[
                ("deleted", models.DateTimeField(editable=False, null=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="primary key for the record as UUID",
                        primary_key=True,
                        serialize=False,
                        verbose_name="id",
                    ),
                ),
                (
                    "created_on",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="date and time at which a record was created",
                        verbose_name="created on",
                    ),
                ),
                (
                    "updated_on",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="date and time at which a record was last updated",
                        verbose_name="updated on",
                    ),
                ),
                (
                    "consumer_site",
                    models.ForeignKey(
                        help_text="consumer site having this organization",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="organizations_links",
                        to="core.ConsumerSite",
                        verbose_name="site",
                    ),
                ),
            ],
            options={
                "verbose_name": "organization in consumer site",
                "verbose_name_plural": "organizations in consumer sites",
                "db_table": "consumersite_organization",
            },
        ),
        migrations.CreateModel(
            name="LTIPassport",
            fields=[
                ("deleted", models.DateTimeField(editable=False, null=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="primary key for the record as UUID",
                        primary_key=True,
                        serialize=False,
                        verbose_name="id",
                    ),
                ),
                (
                    "created_on",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="date and time at which a record was created",
                        verbose_name="created on",
                    ),
                ),
                (
                    "updated_on",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="date and time at which a record was last updated",
                        verbose_name="updated on",
                    ),
                ),
                (
                    "oauth_consumer_key",
                    models.CharField(
                        editable=False,
                        help_text="oauth consumer key to authenticate an LTI consumer on the LTI provider",
                        max_length=255,
                        unique=True,
                        verbose_name="oauth consumer key",
                    ),
                ),
                (
                    "shared_secret",
                    models.CharField(
                        editable=False,
                        help_text="LTI Shared secret",
                        max_length=255,
                        verbose_name="shared secret",
                    ),
                ),
                (
                    "is_enabled",
                    models.BooleanField(
                        default=True,
                        help_text="whether the passport is enabled",
                        verbose_name="is enabled",
                    ),
                ),
                (
                    "consumer_site",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="lti_passport_scopes",
                        to="core.ConsumerSite",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="lti_passports",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "LTI passport",
                "verbose_name_plural": "LTI passports",
                "db_table": "lti_passport",
            },
        ),
        migrations.CreateModel(
            name="Organization",
            fields=[
                ("deleted", models.DateTimeField(editable=False, null=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="primary key for the record as UUID",
                        primary_key=True,
                        serialize=False,
                        verbose_name="id",
                    ),
                ),
                (
                    "created_on",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="date and time at which a record was created",
                        verbose_name="created on",
                    ),
                ),
                (
                    "updated_on",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="date and time at which a record was last updated",
                        verbose_name="updated on",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="name of the organization",
                        max_length=255,
                        verbose_name="name",
                    ),
                ),
                (
                    "consumer_sites",
                    models.ManyToManyField(
                        help_text="consumer sites on which this organization is present",
                        related_name="organizations",
                        through="core.ConsumerSiteOrganization",
                        to="core.ConsumerSite",
                        verbose_name="consumer sites",
                    ),
                ),
            ],
            options={
                "verbose_name": "organization",
                "verbose_name_plural": "organizations",
                "db_table": "organization",
            },
        ),
        migrations.CreateModel(
            name="OrganizationAccess",
            fields=[
                ("deleted", models.DateTimeField(editable=False, null=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="primary key for the record as UUID",
                        primary_key=True,
                        serialize=False,
                        verbose_name="id",
                    ),
                ),
                (
                    "created_on",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="date and time at which a record was created",
                        verbose_name="created on",
                    ),
                ),
                (
                    "updated_on",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="date and time at which a record was last updated",
                        verbose_name="updated on",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("administrator", "administrator"),
                            ("instructor", "instructor"),
                            ("student", "student"),
                        ],
                        default="instructor",
                        help_text="role granted to the user on the consumer site",
                        max_length=20,
                        verbose_name="role",
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        help_text="organization to which the user has access",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_accesses",
                        to="core.Organization",
                        verbose_name="organization",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="user who has access to the organization",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="organization_accesses",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="user",
                    ),
                ),
            ],
            options={
                "verbose_name": "organization access",
                "verbose_name_plural": "organization accesses",
                "db_table": "organization_access",
            },
        ),
        migrations.CreateModel(
            name="Playlist",
            fields=[
                ("deleted", models.DateTimeField(editable=False, null=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="primary key for the record as UUID",
                        primary_key=True,
                        serialize=False,
                        verbose_name="id",
                    ),
                ),
                (
                    "created_on",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="date and time at which a record was created",
                        verbose_name="created on",
                    ),
                ),
                (
                    "updated_on",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="date and time at which a record was last updated",
                        verbose_name="updated on",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="title of the playlist",
                        max_length=255,
                        verbose_name="title",
                    ),
                ),
                (
                    "lti_id",
                    models.CharField(
                        help_text="ID for synchronization with an external LTI tool",
                        max_length=255,
                        verbose_name="lti id",
                    ),
                ),
                (
                    "is_public",
                    models.BooleanField(
                        default=False,
                        help_text="if this playlist can be viewed without any access control",
                        verbose_name="is public",
                    ),
                ),
                ("is_portable_to_playlist", models.BooleanField(default=True)),
                ("is_portable_to_consumer_site", models.BooleanField(default=False)),
                (
                    "consumer_site",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="playlists",
                        to="core.ConsumerSite",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_playlists",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "duplicated_from",
                    models.ForeignKey(
                        blank=True,
                        help_text="original playlist this one was duplicated from",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="duplicates",
                        to="core.Playlist",
                        verbose_name="duplicate from",
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="playlists",
                        to="core.Organization",
                    ),
                ),
            ],
            options={
                "verbose_name": "playlist",
                "verbose_name_plural": "playlists",
                "db_table": "playlist",
            },
        ),
        migrations.CreateModel(
            name="PlaylistAccess",
            fields=[
                ("deleted", models.DateTimeField(editable=False, null=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="primary key for the record as UUID",
                        primary_key=True,
                        serialize=False,
                        verbose_name="id",
                    ),
                ),
                (
                    "created_on",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="date and time at which a record was created",
                        verbose_name="created on",
                    ),
                ),
                (
                    "updated_on",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="date and time at which a record was last updated",
                        verbose_name="updated on",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("administrator", "administrator"),
                            ("instructor", "instructor"),
                            ("student", "student"),
                        ],
                        default="instructor",
                        help_text="role granted to the user on the consumer site",
                        max_length=20,
                        verbose_name="role",
                    ),
                ),
                (
                    "playlist",
                    models.ForeignKey(
                        help_text="playlist to which the user has access",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_accesses",
                        to="core.Playlist",
                        verbose_name="playlist",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="user who has access to the playlist",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="playlist_accesses",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="user",
                    ),
                ),
            ],
            options={
                "verbose_name": "playlist access",
                "verbose_name_plural": "playlist accesses",
                "db_table": "playlist_access",
            },
        ),
        migrations.CreateModel(
            name="SignTrack",
            fields=[
                ("deleted", models.DateTimeField(editable=False, null=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="primary key for the record as UUID",
                        primary_key=True,
                        serialize=False,
                        verbose_name="id",
                    ),
                ),
                (
                    "created_on",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="date and time at which a record was created",
                        verbose_name="created on",
                    ),
                ),
                (
                    "updated_on",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="date and time at which a record was last updated",
                        verbose_name="updated on",
                    ),
                ),
                (
                    "language",
                    models.CharField(
                        choices=[("en", "english"), ("fr", "french")],
                        help_text="language of this track",
                        max_length=5,
                        verbose_name="track language",
                    ),
                ),
                (
                    "uploaded_on",
                    models.DateTimeField(
                        blank=True,
                        help_text="datetime at which the active version of the video was uploaded.",
                        null=True,
                        verbose_name="uploaded on",
                    ),
                ),
                (
                    "state",
                    models.CharField(
                        choices=[
                            ("pending", "pending"),
                            ("processing", "processing"),
                            ("error", "error"),
                            ("ready", "ready"),
                        ],
                        default="pending",
                        help_text="state of the upload and transcoding pipeline in AWS.",
                        max_length=20,
                        verbose_name="state",
                    ),
                ),
            ],
            options={
                "verbose_name": "signs language track",
                "verbose_name_plural": "signs language tracks",
                "db_table": "sign_track",
            },
        ),
        migrations.CreateModel(
            name="TimedTextTrack",
            fields=[
                ("deleted", models.DateTimeField(editable=False, null=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="primary key for the record as UUID",
                        primary_key=True,
                        serialize=False,
                        verbose_name="id",
                    ),
                ),
                (
                    "created_on",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="date and time at which a record was created",
                        verbose_name="created on",
                    ),
                ),
                (
                    "updated_on",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="date and time at which a record was last updated",
                        verbose_name="updated on",
                    ),
                ),
                (
                    "language",
                    models.CharField(
                        choices=[("en", "english"), ("fr", "french")],
                        help_text="language of this track",
                        max_length=5,
                        verbose_name="track language",
                    ),
                ),
                (
                    "uploaded_on",
                    models.DateTimeField(
                        blank=True,
                        help_text="datetime at which the active version of the video was uploaded.",
                        null=True,
                        verbose_name="uploaded on",
                    ),
                ),
                (
                    "state",
                    models.CharField(
                        choices=[
                            ("pending", "pending"),
                            ("processing", "processing"),
                            ("error", "error"),
                            ("ready", "ready"),
                        ],
                        default="pending",
                        help_text="state of the upload and transcoding pipeline in AWS.",
                        max_length=20,
                        verbose_name="state",
                    ),
                ),
                (
                    "mode",
                    models.CharField(
                        choices=[
                            ("st", "Subtitle"),
                            ("ts", "Transcript"),
                            ("cc", "Closed captioning"),
                        ],
                        default="st",
                        help_text="Activate a special mode for this timed text track: simple subtitles, closed captioning (for deaf or hard of hearing viewers) or transcription (complete text below aside of the player).",
                        max_length=2,
                        verbose_name="mode",
                    ),
                ),
            ],
            options={
                "verbose_name": "timed text track",
                "verbose_name_plural": "timed text tracks",
                "db_table": "timed_text_track",
            },
        ),
        migrations.CreateModel(
            name="Video",
            fields=[
                ("deleted", models.DateTimeField(editable=False, null=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="primary key for the record as UUID",
                        primary_key=True,
                        serialize=False,
                        verbose_name="id",
                    ),
                ),
                (
                    "created_on",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="date and time at which a record was created",
                        verbose_name="created on",
                    ),
                ),
                (
                    "updated_on",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="date and time at which a record was last updated",
                        verbose_name="updated on",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="title of the video",
                        max_length=255,
                        verbose_name="title",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="description of the video",
                        null=True,
                        verbose_name="description",
                    ),
                ),
                (
                    "resource_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="UUID to identify the resource in the backend",
                        verbose_name="Resource UUID",
                    ),
                ),
                (
                    "lti_id",
                    models.CharField(
                        help_text="ID for synchronization with an external LTI tool",
                        max_length=255,
                        verbose_name="lti id",
                    ),
                ),
                (
                    "position",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="position of this video in the playlist",
                        verbose_name="position",
                    ),
                ),
                (
                    "uploaded_on",
                    models.DateTimeField(
                        blank=True,
                        help_text="datetime at which the active version of the video was uploaded.",
                        null=True,
                        verbose_name="uploaded on",
                    ),
                ),
                (
                    "state",
                    models.CharField(
                        choices=[
                            ("pending", "pending"),
                            ("processing", "processing"),
                            ("error", "error"),
                            ("ready", "ready"),
                        ],
                        default="pending",
                        help_text="state of the upload and transcoding pipeline in AWS.",
                        max_length=20,
                        verbose_name="state",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="author of the video",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_videos",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="author",
                    ),
                ),
                (
                    "duplicated_from",
                    models.ForeignKey(
                        blank=True,
                        help_text="original video this one was duplicated from",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="duplicates",
                        to="core.Video",
                        verbose_name="duplicate from",
                    ),
                ),
                (
                    "playlist",
                    models.ForeignKey(
                        help_text="playlist to which this video belongs",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="videos",
                        to="core.Playlist",
                        verbose_name="playlist",
                    ),
                ),
            ],
            options={
                "verbose_name": "video",
                "verbose_name_plural": "videos",
                "db_table": "video",
                "ordering": ["position", "id"],
            },
        ),
        migrations.AddField(
            model_name="timedtexttrack",
            name="video",
            field=models.ForeignKey(
                help_text="video for which this track is",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="timedtexttracks",
                to="core.Video",
                verbose_name="video",
            ),
        ),
        migrations.AddField(
            model_name="signtrack",
            name="video",
            field=models.ForeignKey(
                help_text="video for which this track is",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="signtracks",
                to="core.Video",
                verbose_name="video",
            ),
        ),
        migrations.AddField(
            model_name="playlist",
            name="users",
            field=models.ManyToManyField(
                help_text="users who have been granted access to this playlist",
                related_name="playlists",
                through="core.PlaylistAccess",
                to=settings.AUTH_USER_MODEL,
                verbose_name="users",
            ),
        ),
        migrations.AddField(
            model_name="organization",
            name="users",
            field=models.ManyToManyField(
                help_text="users who have been granted access to this organization",
                through="core.OrganizationAccess",
                to=settings.AUTH_USER_MODEL,
                verbose_name="users",
            ),
        ),
        migrations.AddField(
            model_name="ltipassport",
            name="playlist",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="lti_passport_scopes",
                to="core.Playlist",
            ),
        ),
        migrations.AddField(
            model_name="consumersiteorganization",
            name="organization",
            field=models.ForeignKey(
                help_text="organization in this consumer site",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="sites_links",
                to="core.Organization",
                verbose_name="organization",
            ),
        ),
        migrations.AddField(
            model_name="consumersite",
            name="users",
            field=models.ManyToManyField(
                help_text="users who have been granted access to this consumer site",
                through="core.ConsumerSiteAccess",
                to=settings.AUTH_USER_MODEL,
                verbose_name="users",
            ),
        ),
        migrations.AddField(
            model_name="audiotrack",
            name="video",
            field=models.ForeignKey(
                help_text="video for which this track is",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="audiotracks",
                to="core.Video",
                verbose_name="video",
            ),
        ),
        migrations.AddIndex(
            model_name="timedtexttrack",
            index=marsha.core.models.base.NonDeletedUniqueIndex(
                fields=["video", "language", "mode"],
                name="timed_text__video_i_1425f7_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="signtrack",
            index=marsha.core.models.base.NonDeletedUniqueIndex(
                fields=["video", "language"], name="sign_track_video_i_8ae92b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="playlistaccess",
            index=marsha.core.models.base.NonDeletedUniqueIndex(
                fields=["user", "playlist"], name="playlist_ac_user_id_c7df1b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="organizationaccess",
            index=marsha.core.models.base.NonDeletedUniqueIndex(
                fields=["user", "organization"], name="organizatio_user_id_d0a5d6_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="consumersiteorganization",
            index=marsha.core.models.base.NonDeletedUniqueIndex(
                fields=["consumer_site", "organization"],
                name="consumersit_consume_89f4d1_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="consumersiteaccess",
            index=marsha.core.models.base.NonDeletedUniqueIndex(
                fields=["user", "consumer_site"], name="consumersit_user_id_f9d219_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="audiotrack",
            index=marsha.core.models.base.NonDeletedUniqueIndex(
                fields=["video", "language"], name="audio_track_video_i_fe6276_idx"
            ),
        ),
    ]
