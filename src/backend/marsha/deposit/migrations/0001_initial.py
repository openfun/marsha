# Generated by Django 4.0.7 on 2022-09-12 11:51

import uuid

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("core", "0053_video_tags"),
    ]

    operations = [
        migrations.CreateModel(
            name="FileDepository",
            fields=[
                (
                    "deleted",
                    models.DateTimeField(db_index=True, editable=False, null=True),
                ),
                (
                    "deleted_by_cascade",
                    models.BooleanField(default=False, editable=False),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="primary key for the record as UUID",
                        primary_key=True,
                        serialize=False,
                        verbose_name="id",
                    ),
                ),
                (
                    "created_on",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        editable=False,
                        help_text="date and time at which a record was created",
                        verbose_name="created on",
                    ),
                ),
                (
                    "updated_on",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="date and time at which a record was last updated",
                        verbose_name="updated on",
                    ),
                ),
                (
                    "lti_id",
                    models.CharField(
                        blank=True,
                        help_text="ID for synchronization with an external LTI tool",
                        max_length=255,
                        null=True,
                        verbose_name="lti id",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        blank=True,
                        help_text="title of the file_depository",
                        max_length=255,
                        null=True,
                        verbose_name="title",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="description of the file_depository",
                        null=True,
                        verbose_name="description",
                    ),
                ),
                (
                    "position",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="position of this file_depository in the playlist",
                        verbose_name="position",
                    ),
                ),
                (
                    "playlist",
                    models.ForeignKey(
                        help_text="playlist to which this file_depository belongs",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(class)ss",
                        to="core.playlist",
                        verbose_name="playlist",
                    ),
                ),
            ],
            options={
                "verbose_name": "File depository",
                "verbose_name_plural": "File depositories",
                "db_table": "file_depository",
            },
        ),
        migrations.CreateModel(
            name="DepositedFile",
            fields=[
                (
                    "deleted",
                    models.DateTimeField(db_index=True, editable=False, null=True),
                ),
                (
                    "deleted_by_cascade",
                    models.BooleanField(default=False, editable=False),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="primary key for the record as UUID",
                        primary_key=True,
                        serialize=False,
                        verbose_name="id",
                    ),
                ),
                (
                    "created_on",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        editable=False,
                        help_text="date and time at which a record was created",
                        verbose_name="created on",
                    ),
                ),
                (
                    "updated_on",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="date and time at which a record was last updated",
                        verbose_name="updated on",
                    ),
                ),
                (
                    "uploaded_on",
                    models.DateTimeField(
                        blank=True,
                        help_text="datetime at which the active version of the file was uploaded.",
                        null=True,
                        verbose_name="uploaded on",
                    ),
                ),
                (
                    "upload_state",
                    models.CharField(
                        choices=[
                            ("pending", "pending"),
                            ("processing", "processing"),
                            ("error", "error"),
                            ("ready", "ready"),
                            ("deleted", "deleted"),
                            ("scanning", "scanning"),
                            ("infected", "infected"),
                            ("copying", "copying"),
                        ],
                        default="pending",
                        help_text="state of the upload in AWS.",
                        max_length=20,
                        verbose_name="upload state",
                    ),
                ),
                (
                    "filename",
                    models.CharField(
                        blank=True,
                        help_text="filename of the deposited file",
                        max_length=255,
                        null=True,
                        verbose_name="filename",
                    ),
                ),
                (
                    "author_name",
                    models.CharField(
                        blank=True,
                        help_text="author name of the deposited file",
                        max_length=255,
                        null=True,
                        verbose_name="author name",
                    ),
                ),
                (
                    "author_id",
                    models.CharField(
                        blank=True,
                        help_text="author id of the deposited file",
                        max_length=255,
                        null=True,
                        verbose_name="author id",
                    ),
                ),
                (
                    "size",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="size of the deposited file",
                        null=True,
                        verbose_name="size",
                    ),
                ),
                (
                    "extension",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="deposited file extension",
                        max_length=10,
                        null=True,
                        verbose_name="extension",
                    ),
                ),
                (
                    "read",
                    models.BooleanField(
                        default=False,
                        help_text="whether the file has been read by an instructor",
                        verbose_name="read",
                    ),
                ),
                (
                    "file_depository",
                    models.ForeignKey(
                        help_text="file depository to which this deposited file belongs",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="deposited_files",
                        to="deposit.filedepository",
                        verbose_name="file depository",
                    ),
                ),
            ],
            options={
                "verbose_name": "Deposited file",
                "verbose_name_plural": "Deposited files",
                "db_table": "deposited_file",
                "ordering": ["-uploaded_on"],
            },
        ),
        migrations.AddConstraint(
            model_name="filedepository",
            constraint=models.UniqueConstraint(
                condition=models.Q(("deleted", None)),
                fields=("lti_id", "playlist"),
                name="file_depository_unique_idx",
            ),
        ),
    ]
