import { screen } from '@testing-library/react';
import { ResponsiveContext } from 'grommet/contexts/ResponsiveContext';
import { render } from 'lib-tests';
import React, { Fragment, useEffect } from 'react';
import { ErrorBoundary } from 'react-error-boundary';

import { BoundaryScreenError } from '.';

jest.mock('data/stores/useAppConfig', () => ({
  useAppConfig: () => ({
    static: {
      img: {
        marshaWhiteLogo: 'path/to/image.png',
        errorMain: 'path/to/image.png',
      },
    },
  }),
}));

const ErrorComponent = ({ withError }: { withError: boolean }) => {
  useEffect(() => {
    if (withError) {
      throw new Error('Error generated by ErrorComponent');
    }
  }, [withError]);

  return <Fragment>No Error</Fragment>;
};

describe('<BoundaryScreenError />', () => {
  it('child component rendered without error', () => {
    render(
      <ErrorBoundary
        fallbackRender={({ error }) => (
          <BoundaryScreenError code={500} message={error.message} />
        )}
      >
        <ErrorComponent withError={false} />
      </ErrorBoundary>,
    );

    expect(screen.getByText('No Error')).toBeInTheDocument();
  });

  it('child component rendered with error', () => {
    const consoleError = jest
      .spyOn(console, 'error')
      .mockImplementation(() => jest.fn());

    render(
      <ErrorBoundary
        fallbackRender={({ error }) => (
          <BoundaryScreenError code={987} message={error.message} />
        )}
      >
        <ErrorComponent withError={true} />
      </ErrorBoundary>,
    );

    expect(screen.getByText('987')).toBeInTheDocument();
    expect(
      screen.getByText('There seems to be a slight problem:'),
    ).toBeInTheDocument();
    expect(
      screen.getByText('Error generated by ErrorComponent'),
    ).toBeInTheDocument();
    expect(consoleError).toHaveBeenCalled();
    consoleError.mockReset();
  });

  it('check that boundary error page switches in small size', () => {
    const consoleError = jest
      .spyOn(console, 'error')
      .mockImplementation(() => jest.fn());

    const componentErrorBoundary = (
      <ErrorBoundary
        fallbackRender={({ error }) => (
          <BoundaryScreenError code={987} message={error.message} />
        )}
      >
        <ErrorComponent withError={true} />
      </ErrorBoundary>
    );

    const { rerender } = render(
      <ResponsiveContext.Provider value="large">
        {componentErrorBoundary}
      </ResponsiveContext.Provider>,
    );

    expect(screen.getByText('Ooops !')).toHaveStyle('font-size: 4.375rem;');

    rerender(
      <ResponsiveContext.Provider value="small">
        {componentErrorBoundary}
      </ResponsiveContext.Provider>,
    );

    expect(screen.getByText('Ooops !')).toHaveStyle('font-size: 2.5rem;');

    consoleError.mockReset();
  });
});
