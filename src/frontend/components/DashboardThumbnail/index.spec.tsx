import { act, fireEvent, render, screen } from '@testing-library/react';
import fetchMock from 'fetch-mock';
import React from 'react';

import { DashboardThumbnail } from '.';
import { useThumbnail } from '../../data/stores/useThumbnail';
import { modelName } from '../../types/models';
import { uploadState } from '../../types/tracks';
import { Deferred } from '../../utils/tests/Deferred';
import { videoMockFactory } from '../../utils/tests/factories';
import { wrapInIntlProvider } from '../../utils/tests/intl';
import { UploadManagerContext, UploadManagerStatus } from '../UploadManager';

jest.mock('react-router-dom', () => ({
  Redirect: ({ to }: { to: string }) => `Redirect push to ${to}.`,
}));

jest.mock('../../data/appData', () => ({
  appData: {
    jwt: 'some token',
  },
}));

describe('<DashboardThumbnail />', () => {
  afterEach(jest.resetAllMocks);

  it('displays a thumbnail image when the related Thumbnail object is ready', () => {
    const video = videoMockFactory({
      id: '43',
      is_ready_to_show: true,
      show_download: true,
      thumbnail: {
        active_stamp: 128748302847,
        id: '42',
        is_ready_to_show: true,
        upload_state: uploadState.READY,
        urls: {
          144: 'https://example.com/thumbnail/144',
          240: 'https://example.com/thumbnail/240',
          480: 'https://example.com/thumbnail/480',
          720: 'https://example.com/thumbnail/720',
          1080: 'https://example.com/thumbnail/1080',
        },
        video: '43',
      },
      upload_state: uploadState.READY,
    });

    useThumbnail.getState().addResource(video.thumbnail!);
    render(wrapInIntlProvider(<DashboardThumbnail video={video} />));

    // The progress indicator, processing message & error message are not shown
    expect(screen.queryByText('0%')).toEqual(null);
    expect(
      screen.queryByText(
        'Your thumbnail is currently processing. This may take several minutes. It will appear here once done.',
      ),
    ).toEqual(null);
    expect(
      screen.queryByText('There was an error during thumbnail creation.'),
    ).toEqual(null);
    // The thumbnail image is shown
    expect(
      screen.getByAltText('Video thumbnail preview image.').getAttribute('src'),
    ).toEqual('https://example.com/thumbnail/144');
  });

  it('displays a thumbnail image with the autogenerated default thumbnail when there is no Thumbnail resource', () => {
    const videoWithoutThumbnail = videoMockFactory({
      id: '43',
      is_ready_to_show: true,
      show_download: true,
      thumbnail: null,
      upload_state: uploadState.READY,
    });

    render(
      wrapInIntlProvider(<DashboardThumbnail video={videoWithoutThumbnail} />),
    );

    // The progress indicator, processing message & error message are not shown
    expect(screen.queryByText('0%')).toEqual(null);
    expect(
      screen.queryByText(
        'Your thumbnail is currently processing. This may take several minutes. It will appear here once done.',
      ),
    ).toEqual(null);
    expect(
      screen.queryByText('There was an error during thumbnail creation.'),
    ).toEqual(null);
    // The thumbnail image is shown
    expect(
      screen.getByAltText('Video thumbnail preview image.').getAttribute('src'),
    ).toEqual('https://example.com/default_thumbnail/144');
  });

  it('displays a progress bar when the Thumbnail status is uploading', () => {
    const file = new File(['(⌐□_□)'], 'thumb.png');
    const videoWithLoadingThumbnail = videoMockFactory({
      id: '43',
      is_ready_to_show: true,
      show_download: true,
      thumbnail: {
        active_stamp: 128748302847,
        id: '42',
        is_ready_to_show: true,
        upload_state: uploadState.PENDING,
        urls: {
          144: 'https://example.com/thumbnail/144',
          240: 'https://example.com/thumbnail/240',
          480: 'https://example.com/thumbnail/480',
          720: 'https://example.com/thumbnail/720',
          1080: 'https://example.com/thumbnail/1080',
        },
        video: '43',
      },
      upload_state: uploadState.READY,
    });

    useThumbnail.getState().addResource(videoWithLoadingThumbnail.thumbnail!);
    render(
      <UploadManagerContext.Provider
        value={{
          setUploadState: jest.fn(),
          uploadManagerState: {
            42: {
              file,
              objectId: '42',
              objectType: modelName.THUMBNAILS,
              progress: 0,
              status: UploadManagerStatus.UPLOADING,
            },
          },
        }}
      >
        {wrapInIntlProvider(
          <DashboardThumbnail video={videoWithLoadingThumbnail} />,
        )}
      </UploadManagerContext.Provider>,
    );

    // The thumbnail image, processing message & error message are not shown
    expect(screen.queryByAltText('Video thumbnail preview image.')).toEqual(
      null,
    );
    expect(
      screen.queryByText(
        'Your thumbnail is currently processing. This may take several minutes. It will appear here once done.',
      ),
    ).toEqual(null);
    expect(
      screen.queryByText('There was an error during thumbnail creation.'),
    ).toEqual(null);
    // The progress indicator is shown
    screen.getByText('0%');
  });

  it('displays an explanatory message when a thumbnail is processing', () => {
    const videoWithProcessingThumbnail = videoMockFactory({
      id: '43',
      is_ready_to_show: true,
      show_download: true,
      thumbnail: {
        active_stamp: 128748302847,
        id: '42',
        is_ready_to_show: true,
        upload_state: uploadState.PROCESSING,
        urls: {
          144: 'https://example.com/thumbnail/144',
          240: 'https://example.com/thumbnail/240',
          480: 'https://example.com/thumbnail/480',
          720: 'https://example.com/thumbnail/720',
          1080: 'https://example.com/thumbnail/1080',
        },
        video: '43',
      },
      upload_state: uploadState.READY,
    });

    useThumbnail
      .getState()
      .addResource(videoWithProcessingThumbnail.thumbnail!);
    render(
      wrapInIntlProvider(
        <DashboardThumbnail video={videoWithProcessingThumbnail} />,
      ),
    );

    // The thumbnail image, progress indicator & error message are not shown
    expect(screen.queryByAltText('Video thumbnail preview image.')).toEqual(
      null,
    );
    expect(screen.queryByText('0%')).toEqual(null);
    expect(
      screen.queryByText('There was an error during thumbnail creation.'),
    ).toEqual(null);
    // The processing message is shown
    screen.getByText(
      'Your thumbnail is currently processing. This may take several minutes. It will appear here once done.',
    );
  });

  it('displays an explanatory message when a thumbnail is pending but upload state is success', () => {
    const file = new File(['(⌐□_□)'], 'thumb.png');
    const videoWithLoadingThumbnail = videoMockFactory({
      id: '43',
      is_ready_to_show: true,
      show_download: true,
      thumbnail: {
        active_stamp: 128748302847,
        id: '42',
        is_ready_to_show: true,
        upload_state: uploadState.PENDING,
        urls: {
          144: 'https://example.com/thumbnail/144',
          240: 'https://example.com/thumbnail/240',
          480: 'https://example.com/thumbnail/480',
          720: 'https://example.com/thumbnail/720',
          1080: 'https://example.com/thumbnail/1080',
        },
        video: '43',
      },
      upload_state: uploadState.READY,
    });

    useThumbnail.getState().addResource(videoWithLoadingThumbnail.thumbnail!);

    render(
      <UploadManagerContext.Provider
        value={{
          setUploadState: jest.fn(),
          uploadManagerState: {
            42: {
              file,
              objectId: '42',
              objectType: modelName.THUMBNAILS,
              progress: 0,
              status: UploadManagerStatus.SUCCESS,
            },
          },
        }}
      >
        {wrapInIntlProvider(
          <DashboardThumbnail video={videoWithLoadingThumbnail} />,
        )}
      </UploadManagerContext.Provider>,
    );

    // The thumbnail image, error message and progress indicator are not shown
    expect(screen.queryByAltText('Video thumbnail preview image.')).toEqual(
      null,
    );
    expect(
      screen.queryByText('There was an error during thumbnail creation.'),
    ).toEqual(null);
    expect(screen.queryByText('0%')).toEqual(null);
    // The processing message is shown
    screen.getByText(
      'Your thumbnail is currently processing. This may take several minutes. It will appear here once done.',
    );
  });

  it('displays an error message when there is an issue with a thumbnail', () => {
    const videoWithErroredThumbnail = videoMockFactory({
      id: '43',
      is_ready_to_show: true,
      show_download: true,
      thumbnail: {
        active_stamp: 128748302847,
        id: '42',
        is_ready_to_show: true,
        upload_state: uploadState.ERROR,
        urls: {
          144: 'https://example.com/thumbnail/144',
          240: 'https://example.com/thumbnail/240',
          480: 'https://example.com/thumbnail/480',
          720: 'https://example.com/thumbnail/720',
          1080: 'https://example.com/thumbnail/1080',
        },
        video: '43',
      },
      upload_state: uploadState.READY,
    });

    useThumbnail.getState().addResource(videoWithErroredThumbnail.thumbnail!);

    render(
      wrapInIntlProvider(
        <DashboardThumbnail video={videoWithErroredThumbnail} />,
      ),
    );

    // The thumbnail image, progress indicator & processing message are not shown
    expect(screen.queryByAltText('Video thumbnail preview image.')).toEqual(
      null,
    );
    expect(screen.queryByText('0%')).toEqual(null);
    expect(
      screen.queryByText(
        'Your thumbnail is currently processing. This may take several minutes. It will appear here once done.',
      ),
    ).toEqual(null);
    // The error message is shown
    screen.getByText('There was an error during thumbnail creation.');
  });

  it('creates a new thumbnail and redirects the user to the upload form they click on the replace button', async () => {
    const deferred = new Deferred();
    fetchMock.mock('/api/thumbnails/', deferred.promise, {
      method: 'POST',
    });
    const videoWithoutThumbnail = videoMockFactory({
      id: '43',
      is_ready_to_show: true,
      show_download: true,
      thumbnail: null,
      upload_state: uploadState.READY,
    });
    const thumbnailCreated = {
      active_stamp: 128748302847,
      id: '42',
      is_ready_to_show: true,
      upload_state: uploadState.READY,
      urls: {
        144: 'https://example.com/thumbnail/144',
        240: 'https://example.com/thumbnail/240',
        480: 'https://example.com/thumbnail/480',
        720: 'https://example.com/thumbnail/720',
        1080: 'https://example.com/thumbnail/1080',
      },
      video: '43',
    };

    expect(
      useThumbnail.getState().thumbnails[thumbnailCreated.id],
    ).not.toBeDefined();
    render(
      wrapInIntlProvider(<DashboardThumbnail video={videoWithoutThumbnail} />),
    );

    expect(
      screen.getByAltText('Video thumbnail preview image.').getAttribute('src'),
    ).toEqual('https://example.com/default_thumbnail/144');

    fireEvent.click(screen.getByText('Replace this thumbnail'));
    await act(async () => deferred.resolve(JSON.stringify(thumbnailCreated)));
    expect(fetchMock.calls()).toHaveLength(1);

    expect(fetchMock.lastCall()![0]).toEqual('/api/thumbnails/');
    expect(fetchMock.lastCall()![1]!.headers).toEqual({
      Authorization: 'Bearer some token',
      'Content-Type': 'application/json',
    });
    expect(useThumbnail.getState().thumbnails[thumbnailCreated.id]).toEqual(
      thumbnailCreated,
    );
    screen.getByText('Redirect push to /form/thumbnails/42.');
  });
});
