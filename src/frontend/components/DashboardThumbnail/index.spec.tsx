import { cleanup, fireEvent, render, wait } from '@testing-library/react';
import React from 'react';
import { Provider } from 'react-redux';

jest.mock('../../data/sideEffects/createThumbnail/createThumbnail', () => ({
  createThumbnail: jest.fn(),
}));

jest.mock('react-router-dom', () => ({
  Redirect: ({ push, to }: { push: boolean; to: string }) =>
    `Redirect push to ${to}.`,
}));

import { DashboardThumbnail } from '.';
import { bootstrapStore } from '../../data/bootstrapStore';
import { createThumbnail } from '../../data/sideEffects/createThumbnail/createThumbnail';
import { appState } from '../../types/AppData';
import { uploadState } from '../../types/tracks';
import { jestMockOf } from '../../utils/types';

const mockCreateThumbnail: jestMockOf<
  typeof createThumbnail
> = createThumbnail as any;

describe('<DashboardThumbnail />', () => {
  afterEach(jest.resetAllMocks);
  afterEach(cleanup);

  // Disable useless async act warnings
  // TODO: remove this spy as soon as async act is available
  beforeAll(() => {
    jest.spyOn(console, 'error');
  });

  const video = {
    description: '',
    id: '43',
    is_ready_to_play: true,
    show_download: true,
    thumbnail: {
      active_stamp: 128748302847,
      id: '42',
      is_ready_to_display: true,
      upload_state: uploadState.READY,
      urls: {
        144: 'https://example.com/thumbnail/144',
        240: 'https://example.com/thumbnail/240',
        480: 'https://example.com/thumbnail/480',
        720: 'https://example.com/thumbnail/720',
        1080: 'https://example.com/thumbnail/1080',
      },
      video: '43',
    },
    timed_text_tracks: [],
    title: '',
    upload_state: uploadState.READY,
    urls: {
      manifests: {
        dash: 'https://example.com/dash',
        hls: 'https://example.com/hls',
      },
      mp4: {
        144: 'https://example.com/mp4/144',
        240: 'https://example.com/mp4/240',
        480: 'https://example.com/mp4/480',
        720: 'https://example.com/mp4/720',
        1080: 'https://example.com/mp4/1080',
      },
      thumbnails: {
        144: 'https://example.com/default_thumbnail/144',
        240: 'https://example.com/default_thumbnail/240',
        480: 'https://example.com/default_thumbnail/480',
        720: 'https://example.com/default_thumbnail/720',
        1080: 'https://example.com/default_thumbnail/1080',
      },
    },
  };

  it('displays a thumbnail image when the related Thumbnail object is ready', () => {
    const { getByAltText, queryByText } = render(
      <Provider
        store={bootstrapStore({
          jwt: '',
          resourceLinkid: '',
          state: appState.INSTRUCTOR,
          video,
        })}
      >
        <DashboardThumbnail video={video} />
      </Provider>,
    );

    // The progress indicator, processing message & error message are not shown
    expect(queryByText('0%')).toEqual(null);
    expect(
      queryByText(
        'Your thumbnail is currently processing. This may take several minutes. It will appear here once done.',
      ),
    ).toEqual(null);
    expect(
      queryByText('There was an error during thumbnail creation.'),
    ).toEqual(null);
    // The thumbnail image is shown
    expect(
      getByAltText('Video thumbnail preview image.').getAttribute('src'),
    ).toEqual('https://example.com/thumbnail/144');
  });

  it('displays a thumbnail image with the autogenerated default thumbnail when there is no Thumbnail resource', () => {
    const videoWithoutThumbnail = {
      ...video,
      thumbnail: null,
    };

    const { getByAltText, queryByText } = render(
      <Provider
        store={bootstrapStore({
          jwt: '',
          resourceLinkid: '',
          state: appState.INSTRUCTOR,
          video: videoWithoutThumbnail,
        })}
      >
        <DashboardThumbnail video={videoWithoutThumbnail} />
      </Provider>,
    );

    // The progress indicator, processing message & error message are not shown
    expect(queryByText('0%')).toEqual(null);
    expect(
      queryByText(
        'Your thumbnail is currently processing. This may take several minutes. It will appear here once done.',
      ),
    ).toEqual(null);
    expect(
      queryByText('There was an error during thumbnail creation.'),
    ).toEqual(null);
    // The thumbnail image is shown
    expect(
      getByAltText('Video thumbnail preview image.').getAttribute('src'),
    ).toEqual('https://example.com/default_thumbnail/144');
  });

  it('displays a progress bar when the Thumbnail status is uploading', () => {
    const videoWithLoadingThumbnail = {
      ...video,
      thumbnail: {
        ...video.thumbnail,
        upload_state: uploadState.UPLOADING,
      },
    };

    const { getByText, queryByAltText, queryByText } = render(
      <Provider
        store={bootstrapStore({
          jwt: '',
          resourceLinkid: '',
          state: appState.INSTRUCTOR,
          video: videoWithLoadingThumbnail,
        })}
      >
        <DashboardThumbnail video={videoWithLoadingThumbnail} />
      </Provider>,
    );

    // The thumbnail image, processing message & error message are not shown
    expect(queryByAltText('Video thumbnail preview image.')).toEqual(null);
    expect(
      queryByText(
        'Your thumbnail is currently processing. This may take several minutes. It will appear here once done.',
      ),
    ).toEqual(null);
    expect(
      queryByText('There was an error during thumbnail creation.'),
    ).toEqual(null);
    // The progress indicator is shown
    getByText('0%');
  });

  it('displays an explanatory message when a thumbnail is processing', () => {
    const videoWithProcessingThumbnail = {
      ...video,
      thumbnail: {
        ...video.thumbnail,
        upload_state: uploadState.PROCESSING,
      },
    };

    const { getByText, queryByAltText, queryByText } = render(
      <Provider
        store={bootstrapStore({
          jwt: '',
          resourceLinkid: '',
          state: appState.INSTRUCTOR,
          video: videoWithProcessingThumbnail,
        })}
      >
        <DashboardThumbnail video={videoWithProcessingThumbnail} />
      </Provider>,
    );

    // The thumbnail image, progress indicator & error message are not shown
    expect(queryByAltText('Video thumbnail preview image.')).toEqual(null);
    expect(queryByText('0%')).toEqual(null);
    expect(
      queryByText('There was an error during thumbnail creation.'),
    ).toEqual(null);
    // The processing message is shown
    getByText(
      'Your thumbnail is currently processing. This may take several minutes. It will appear here once done.',
    );
  });

  it('displays an error message when there is an issue with a thumbnail', () => {
    const videoWithErroredThumbnail = {
      ...video,
      thumbnail: {
        ...video.thumbnail,
        upload_state: uploadState.ERROR,
      },
    };

    const { getByText, queryByAltText, queryByText } = render(
      <Provider
        store={bootstrapStore({
          jwt: '',
          resourceLinkid: '',
          state: appState.INSTRUCTOR,
          video: videoWithErroredThumbnail,
        })}
      >
        <DashboardThumbnail video={videoWithErroredThumbnail} />
      </Provider>,
    );

    // The thumbnail image, progress indicator & processing message are not shown
    expect(queryByAltText('Video thumbnail preview image.')).toEqual(null);
    expect(queryByText('0%')).toEqual(null);
    expect(
      queryByText(
        'Your thumbnail is currently processing. This may take several minutes. It will appear here once done.',
      ),
    ).toEqual(null);
    // The error message is shown
    getByText('There was an error during thumbnail creation.');
  });

  it('creates a new thumbnail and redirects the user to the upload form they click on the replace button', async () => {
    mockCreateThumbnail.mockResolvedValue(video.thumbnail);
    const videoWithoutThumbnail = {
      ...video,
      thumbnail: null,
    };

    const { getByAltText, getByText } = render(
      <Provider
        store={bootstrapStore({
          jwt:
            'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2M' +
            'jM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c',
          resourceLinkid: '',
          state: appState.INSTRUCTOR,
          video: videoWithoutThumbnail,
        })}
      >
        <DashboardThumbnail video={videoWithoutThumbnail} />
      </Provider>,
    );

    expect(
      getByAltText('Video thumbnail preview image.').getAttribute('src'),
    ).toEqual('https://example.com/default_thumbnail/144');

    fireEvent.click(getByText('Replace this thumbnail'));
    await wait();
    expect(mockCreateThumbnail).toHaveBeenCalledWith(
      'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2M' +
        'jM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c',
    );
    getByText('Redirect push to /form/thumbnail/42.');
  });
});
