#!/usr/bin/env bash

BASE_DIR=$(dirname "${BASH_SOURCE[0]}")

# assertion test function
function assert_equal() {
  if [[ "$1" == "$2" ]]; then
    echo "Test passed!"
  else
    echo "Test failed!"
    echo "Expected: $2"
    echo "Got: $1"
  fi
}

# mock docker calls
function docker() {
    echo "$@"
}
export -f docker

# Calling `bin/lambda build` without any arguments should use production tag and target
result=$("${BASE_DIR}"/lambda build)
expected="build --build-arg POPPLER_VERSION=21.12.0 --build-arg POPPLER_DATA_VERSION=0.4.11 --build-arg OPENJPEG_VERSION=2.4.0 -t marsha/lambda:production --target production bin/../src/aws/"
assert_equal "${result}" "${expected}"

# Calling `bin/lambda build` with arguments should use given tag and target
result=$("${BASE_DIR}"/lambda build "test_tag" "test_target")
expected="build --build-arg POPPLER_VERSION=21.12.0 --build-arg POPPLER_DATA_VERSION=0.4.11 --build-arg OPENJPEG_VERSION=2.4.0 -t marsha/lambda:test_tag --target test_target bin/../src/aws/"
assert_equal "${result}" "${expected}"

# Calling `make build-lambda-dev` should use dev tag and development target
result=$(make build-lambda-dev)
expected="build --build-arg POPPLER_VERSION=21.12.0 --build-arg POPPLER_DATA_VERSION=0.4.11 --build-arg OPENJPEG_VERSION=2.4.0 -t marsha/lambda:dev --target development bin/../src/aws/"
assert_equal "${result}" "${expected}"
